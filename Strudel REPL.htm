<!DOCTYPE html>
<html lang="en" class="dark" style="--app-height: 702px;"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><style>.ͼ1.cm-focused {outline: 1px dotted #212121;}
.ͼ1 {position: relative !important; box-sizing: border-box; display: flex !important; flex-direction: column;}
.ͼ1 .cm-scroller {display: flex !important; align-items: flex-start !important; font-family: monospace; line-height: 1.4; height: 100%; overflow-x: auto; position: relative; z-index: 0;}
.ͼ1 .cm-content[contenteditable=true] {-webkit-user-modify: read-write-plaintext-only;}
.ͼ1 .cm-content {margin: 0; flex-grow: 2; flex-shrink: 0; display: block; white-space: pre; word-wrap: normal; box-sizing: border-box; min-height: 100%; padding: 4px 0; outline: none;}
.ͼ1 .cm-lineWrapping {white-space: pre-wrap; white-space: break-spaces; word-break: break-word; overflow-wrap: anywhere; flex-shrink: 1;}
.ͼ2 .cm-content {caret-color: black;}
.ͼ3 .cm-content {caret-color: white;}
.ͼ1 .cm-line {display: block; padding: 0 2px 0 6px;}
.ͼ1 .cm-layer > * {position: absolute;}
.ͼ1 .cm-layer {position: absolute; left: 0; top: 0; contain: size style;}
.ͼ2 .cm-selectionBackground {background: #d9d9d9;}
.ͼ3 .cm-selectionBackground {background: #222;}
.ͼ2.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground {background: #d7d4f0;}
.ͼ3.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground {background: #233;}
.ͼ1 .cm-cursorLayer {pointer-events: none;}
.ͼ1.cm-focused > .cm-scroller > .cm-cursorLayer {animation: steps(1) cm-blink 1.2s infinite;}
@keyframes cm-blink {50% {opacity: 0;}}
@keyframes cm-blink2 {50% {opacity: 0;}}
.ͼ1 .cm-cursor, .ͼ1 .cm-dropCursor {border-left: 1.2px solid black; margin-left: -0.6px; pointer-events: none;}
.ͼ1 .cm-cursor {display: none;}
.ͼ3 .cm-cursor {border-left-color: #444;}
.ͼ1 .cm-dropCursor {position: absolute;}
.ͼ1.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor {display: block;}
.ͼ1 .cm-iso {unicode-bidi: isolate;}
.ͼ1 .cm-announced {position: fixed; top: -10000px;}
@media print {.ͼ1 .cm-announced {display: none;}}
.ͼ2 .cm-activeLine {background-color: #cceeff44;}
.ͼ3 .cm-activeLine {background-color: #99eeff33;}
.ͼ2 .cm-specialChar {color: red;}
.ͼ3 .cm-specialChar {color: #f78;}
.ͼ1 .cm-gutters {flex-shrink: 0; display: flex; height: 100%; box-sizing: border-box; inset-inline-start: 0; z-index: 200;}
.ͼ2 .cm-gutters {background-color: #f5f5f5; color: #6c6c6c; border-right: 1px solid #ddd;}
.ͼ3 .cm-gutters {background-color: #333338; color: #ccc;}
.ͼ1 .cm-gutter {display: flex !important; flex-direction: column; flex-shrink: 0; box-sizing: border-box; min-height: 100%; overflow: hidden;}
.ͼ1 .cm-gutterElement {box-sizing: border-box;}
.ͼ1 .cm-lineNumbers .cm-gutterElement {padding: 0 3px 0 5px; min-width: 20px; text-align: right; white-space: nowrap;}
.ͼ2 .cm-activeLineGutter {background-color: #e2f2ff;}
.ͼ3 .cm-activeLineGutter {background-color: #222227;}
.ͼ1 .cm-panels {box-sizing: border-box; position: sticky; left: 0; right: 0;}
.ͼ2 .cm-panels {background-color: #f5f5f5; color: black;}
.ͼ2 .cm-panels-top {border-bottom: 1px solid #ddd;}
.ͼ2 .cm-panels-bottom {border-top: 1px solid #ddd;}
.ͼ3 .cm-panels {background-color: #333338; color: white;}
.ͼ1 .cm-tab {display: inline-block; overflow: hidden; vertical-align: bottom;}
.ͼ1 .cm-widgetBuffer {vertical-align: text-top; height: 1em; width: 0; display: inline;}
.ͼ1 .cm-placeholder {color: #888; display: inline-block; vertical-align: top;}
.ͼ1 .cm-highlightSpace:before {content: attr(data-display); position: absolute; pointer-events: none; color: #888;}
.ͼ1 .cm-highlightTab {background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>'); background-size: auto 100%; background-position: right 90%; background-repeat: no-repeat;}
.ͼ1 .cm-trailingSpace {background-color: #ff332255;}
.ͼ1 .cm-button {vertical-align: middle; color: inherit; font-size: 70%; padding: .2em 1em; border-radius: 1px;}
.ͼ2 .cm-button:active {background-image: linear-gradient(#b4b4b4, #d0d3d6);}
.ͼ2 .cm-button {background-image: linear-gradient(#eff1f5, #d9d9df); border: 1px solid #888;}
.ͼ3 .cm-button:active {background-image: linear-gradient(#111, #333);}
.ͼ3 .cm-button {background-image: linear-gradient(#393939, #111); border: 1px solid #888;}
.ͼ1 .cm-textfield {vertical-align: middle; color: inherit; font-size: 70%; border: 1px solid silver; padding: .2em .5em;}
.ͼ2 .cm-textfield {background-color: white;}
.ͼ3 .cm-textfield {border: 1px solid #555; background-color: inherit;}
.ͼ1.cm-focused .cm-matchingBracket {background-color: #328c8252;}
.ͼ1.cm-focused .cm-nonmatchingBracket {background-color: #bb555544;}
.ͼ5 {color: #404740;}
.ͼ6 {text-decoration: underline;}
.ͼ7 {text-decoration: underline; font-weight: bold;}
.ͼ8 {font-style: italic;}
.ͼ9 {font-weight: bold;}
.ͼa {text-decoration: line-through;}
.ͼb {color: #708;}
.ͼc {color: #219;}
.ͼd {color: #164;}
.ͼe {color: #a11;}
.ͼf {color: #e40;}
.ͼg {color: #00f;}
.ͼh {color: #30a;}
.ͼi {color: #085;}
.ͼj {color: #167;}
.ͼk {color: #256;}
.ͼl {color: #00c;}
.ͼm {color: #940;}
.ͼn {color: #f00;}
.ͼov {color: #c792ea;}
.ͼow {color: #89ddff;}
.ͼox {color: #eeffff;}
.ͼoy {color: #c3e88d;}
.ͼoz {color: #f78c6c;}
.ͼp0 {color: #c3e88d;}
.ͼp1 {color: #82aaff;}
.ͼp2 {color: #c3e88d;}
.ͼp3 {color: #c3e88d;}
.ͼp4 {color: #7d8799;}
.ͼp5 {color: #c792ea;}
.ͼp6 {color: #c3e88d;}
.ͼp7 {color: #525154;}
.ͼp8 {color: #ffcb6b;}
.ͼp9 {color: #c792ea;}
.ͼpa {color: #c792ea;}
.ͼpb {color: #decb6b;}
.ͼpc {color: #ffffff;}
.ͼpd {color: #82aaff;}
.ͼou .cm-gutters {background-color: transparent; color: #8a919966;}
.ͼou {background-color: #222; color: #75baff;}
.ͼou .cm-content {caret-color: #ffcc00;}
.ͼou .cm-cursor, .ͼou .cm-dropCursor {border-left-color: #ffcc00;}
.ͼou .cm-activeLine {background-color: #00000050;}
.ͼou .cm-activeLineGutter {background-color: #00000050;}
.ͼou.cm-focused .cm-selectionBackground, .ͼou .cm-line::selection, .ͼou .cm-selectionLayer .cm-selectionBackground, .ͼou .cm-content ::selection {background: rgba(128, 203, 196, 0.5) !important;}
.ͼou .cm-selectionMatch {background-color: #036dd626;}
.ͼ4 .cm-line ::selection {background-color: transparent !important;}
.ͼ4 .cm-line::selection {background-color: transparent !important;}
.ͼ4 .cm-line {caret-color: transparent !important;}
.ͼ4 .cm-content {caret-color: transparent !important;}
</style><!-- Global Metadata --><meta charset="utf-8"><meta name="viewport" content="width=device-width"><meta name="generator" content="Astro v4.0.8"><link rel="alternate" type="application/rss+xml" title="RSS Feed for strudel.cc" href="https://strudel.cc/rss.xml"><link rel="icon" type="image/svg+xml" href="https://strudel.cc/favicon.ico"><meta name="description" content="Strudel is a music live coding environment for the browser, porting the TidalCycles pattern language to JavaScript."><link rel="icon" href="https://strudel.cc/favicon.ico"><link rel="apple-touch-icon" href="https://strudel.cc/icons/apple-icon-180.png" sizes="180x180"><meta name="theme-color" content="#222222"><!-- base href="https://strudel.cc/" --><!-- Scrollable a11y code helper --><script `${basenotrailing}="" make-scrollable-code-focusable.js`="/make-scrollable-code-focusable.js"></script><!-- this does not work for some reason: --><!-- <style is:global define:vars={strudelTheme}></style> --><!-- the following variables are just a fallback to make sure everything is readable without JS --><link rel="manifest" href="https://strudel.cc/manifest.webmanifest"><title>Strudel REPL</title><link rel="stylesheet" href="Strudel%20REPL_files/bakery.0NCuxCIY.css">
<style>@font-face{font-family:PressStart;src:url(/fonts/PressStart2P/PressStart2P-Regular.ttf)}@font-face{font-family:BigBlueTerminal;src:url(/fonts/BigBlueTerminal/BigBlue_TerminalPlus.TTF)}@font-face{font-family:x3270;src:url(/fonts/3270/3270-Regular.ttf)}@font-face{font-family:galactico;src:url(/fonts/galactico/Galactico-Basic.otf)}@font-face{font-family:we-come-in-peace;src:url(/fonts/we-come-in-peace/we-come-in-peace-bb.regular.ttf)}@font-face{font-family:FiraCode;src:url(/fonts/FiraCode/FiraCode-Regular.ttf)}@font-face{font-family:FiraCode-SemiBold;src:url(/fonts/FiraCode/FiraCode-SemiBold.ttf)}@font-face{font-family:teletext;src:url(/fonts/teletext/EuropeanTeletext.ttf)}@font-face{font-family:mode7;src:url(/fonts/mode7/MODE7GX3.TTF)}.prose>h1:not(:first-child){margin-top:30px}:root{--app-height: 100vh}#console-tab{font-family:BigBlueTerminal,monospace}:root{--background: #222;--lineBackground: #22222299;--foreground: #fff;--caret: #ffcc00;--selection: rgba(128, 203, 196, .5);--selectionMatch: #036dd626;--lineHighlight: #00000050;--gutterBackground: transparent;--gutterForeground: #8a919966}
:root{--background: #222;--lineBackground: #22222299;--foreground: #fff;--caret: #ffcc00;--selection: rgba(128, 203, 196, .5);--selectionMatch: #036dd626;--lineHighlight: #00000050;--gutterBackground: transparent;--gutterForeground: #8a919966}.darken:before{content:" ";position:fixed;top:0;left:0;width:100vw;height:100vh;display:block;background:black;opacity:.5}#code .cm-scroller{padding-top:10px!important;height:100%;font-family:inherit}#code .cm-content{padding-bottom:50vh}#code .cm-line>*{background:var(--lineBackground)}#code .cm-editor{background-color:transparent!important;height:100%;z-index:11}#code .cm-theme{width:100%;height:100%}#code .cm-theme-light{width:100%}#code .cm-cursorLayer{animation-name:inherit!important}#code .cm-cursor{border-left:2px solid currentcolor!important}#code .cm-foldGutter{display:none!important}#code .cm-focused{outline:none}#code .cm-matchingBracket{-webkit-text-decoration:underline .18rem;text-decoration:underline .18rem;text-underline-offset:.22rem}
</style><script type="module" src="Strudel%20REPL_files/hoisted.PJP9iIEy.js"></script><style id="strudel-theme-vars">:root {
      --background: #222 !important;
--lineBackground: #22222299 !important;
--foreground: #fff !important;
--caret: #ffcc00 !important;
--selection: rgba(128, 203, 196, 0.5) !important;
--selectionMatch: #036dd626 !important;
--lineHighlight: #00000050 !important;
--gutterBackground: transparent !important;
--gutterForeground: #8a919966 !important;
    }</style><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/index.DZV7fHOB.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/index.UJNmFKXo.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/index.Nkt9jjly.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/index.FXqAg7Yr.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/hydra.w9mh44de.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/preload-helper.VK1VLUGj.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/serial.L5Pf1iIR.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/index.XXFxPes9.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/scope.SyqYS1nu.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/index.MAhw9ev7.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/index.puyUzhxQ.js"><link rel="modulepreload" as="script" crossorigin="" href="https://strudel.cc/_astro/osc.tvjtkjBZ.js"></head> <body class="h-app-height bg-background" cz-shortcut-listen="true"><canvas id="test-canvas" width="3072" height="1406" style="pointer-events: none; width: 100%; height: 100%; position: fixed; top: 0px; left: 0px;"></canvas> <style>astro-island,astro-slot,astro-static-slot{display:contents}</style><script>(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).only=e;window.dispatchEvent(new Event("astro:only"));})();;(()=>{var b=Object.defineProperty;var f=(c,o,i)=>o in c?b(c,o,{enumerable:!0,configurable:!0,writable:!0,value:i}):c[o]=i;var l=(c,o,i)=>(f(c,typeof o!="symbol"?o+"":o,i),i);var p;{let c={0:t=>m(t),1:t=>i(t),2:t=>new RegExp(t),3:t=>new Date(t),4:t=>new Map(i(t)),5:t=>new Set(i(t)),6:t=>BigInt(t),7:t=>new URL(t),8:t=>new Uint8Array(t),9:t=>new Uint16Array(t),10:t=>new Uint32Array(t)},o=t=>{let[e,r]=t;return e in c?c[e](r):void 0},i=t=>t.map(o),m=t=>typeof t!="object"||t===null?t:Object.fromEntries(Object.entries(t).map(([e,r])=>[e,o(r)]));customElements.get("astro-island")||customElements.define("astro-island",(p=class extends HTMLElement{constructor(){super(...arguments);l(this,"Component");l(this,"hydrator");l(this,"hydrate",async()=>{var d;if(!this.hydrator||!this.isConnected)return;let e=(d=this.parentElement)==null?void 0:d.closest("astro-island[ssr]");if(e){e.addEventListener("astro:hydrate",this.hydrate,{once:!0});return}let r=this.querySelectorAll("astro-slot"),a={},h=this.querySelectorAll("template[data-astro-template]");for(let n of h){let s=n.closest(this.tagName);s!=null&&s.isSameNode(this)&&(a[n.getAttribute("data-astro-template")||"default"]=n.innerHTML,n.remove())}for(let n of r){let s=n.closest(this.tagName);s!=null&&s.isSameNode(this)&&(a[n.getAttribute("name")||"default"]=n.innerHTML)}let u;try{u=this.hasAttribute("props")?m(JSON.parse(this.getAttribute("props"))):{}}catch(n){let s=this.getAttribute("component-url")||"<unknown>",y=this.getAttribute("component-export");throw y&&(s+=` (export ${y})`),console.error(`[hydrate] Error parsing props for component ${s}`,this.getAttribute("props"),n),n}await this.hydrator(this)(this.Component,u,a,{client:this.getAttribute("client")}),this.removeAttribute("ssr"),this.dispatchEvent(new CustomEvent("astro:hydrate"))});l(this,"unmount",()=>{this.isConnected||this.dispatchEvent(new CustomEvent("astro:unmount"))})}disconnectedCallback(){document.removeEventListener("astro:after-swap",this.unmount),document.addEventListener("astro:after-swap",this.unmount,{once:!0})}connectedCallback(){if(!this.hasAttribute("await-children")||document.readyState==="interactive"||document.readyState==="complete")this.childrenConnectedCallback();else{let e=()=>{document.removeEventListener("DOMContentLoaded",e),r.disconnect(),this.childrenConnectedCallback()},r=new MutationObserver(()=>{var a;((a=this.lastChild)==null?void 0:a.nodeType)===Node.COMMENT_NODE&&this.lastChild.nodeValue==="astro:end"&&(this.lastChild.remove(),e())});r.observe(this,{childList:!0}),document.addEventListener("DOMContentLoaded",e)}}async childrenConnectedCallback(){let e=this.getAttribute("before-hydration-url");e&&await import(e),this.start()}start(){let e=JSON.parse(this.getAttribute("opts")),r=this.getAttribute("client");if(Astro[r]===void 0){window.addEventListener(`astro:${r}`,()=>this.start(),{once:!0});return}Astro[r](async()=>{let a=this.getAttribute("renderer-url"),[h,{default:u}]=await Promise.all([import(this.getAttribute("component-url")),a?import(a):()=>()=>{}]),d=this.getAttribute("component-export")||"default";if(!d.includes("."))this.Component=h[d];else{this.Component=h;for(let n of d.split("."))this.Component=this.Component[n]}return this.hydrator=u,this.hydrate},e,this)}attributeChangedCallback(){this.hydrate()}},l(p,"observedAttributes",["props"]),p))}})();</script><astro-island uid="ZygXRk" component-url="/_astro/Repl.PVEBtsF8.js" component-export="Repl" renderer-url="/_astro/client.d_3H3uYr.js" props="{}" client="only" opts="{&quot;name&quot;:&quot;Repl&quot;,&quot;value&quot;:&quot;react&quot;}"><div class="h-full flex flex-col relative"><div class="overflow-hidden opacity-50 fixed top-0 left-0 w-full z-[1000]"><div class="h-[2px] block w-full bg-transparent"><div></div></div></div><header id="header" class="flex-none text-black  z-[100] text-lg select-none bg-lineHighlight sticky top-0 w-full py-1 justify-between md:flex"><div class="px-4 flex space-x-2 md:pt-0 select-none"><h1 class="text-xl text-foreground font-bold flex space-x-2 items-center"><div class="mt-[1px] animate-spin cursor-pointer">🌀</div><div class="animate-pulse"><span class="">strudel</span> <span class="text-sm">REPL</span></div></h1></div><div class="flex max-w-full overflow-auto text-foreground"><button title="stop" class="p-2 hover:opacity-50"><span class="flex items-center space-x-1 w-16"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon" class="w-6 h-6"><path fill-rule="evenodd" d="M2 10a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm5-2.25A.75.75 0 0 1 7.75 7h4.5a.75.75 0 0 1 .75.75v4.5a.75.75 0 0 1-.75.75h-4.5a.75.75 0 0 1-.75-.75v-4.5Z" clip-rule="evenodd"></path></svg><span>stop</span></span></button><button title="update" class="flex items-center space-x-1 p-2 hover:opacity-50"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon" class="w-6 h-6"><path fill-rule="evenodd" d="M15.312 11.424a5.5 5.5 0 0 1-9.201 2.466l-.312-.311h2.433a.75.75 0 0 0 0-1.5H3.989a.75.75 0 0 0-.75.75v4.242a.75.75 0 0 0 1.5 0v-2.43l.31.31a7 7 0 0 0 11.712-3.138.75.75 0 0 0-1.449-.39Zm1.23-3.723a.75.75 0 0 0 .219-.53V2.929a.75.75 0 0 0-1.5 0V5.36l-.31-.31A7 7 0 0 0 3.239 8.188a.75.75 0 1 0 1.448.389A5.5 5.5 0 0 1 13.89 6.11l.311.31h-2.432a.75.75 0 0 0 0 1.5h4.243a.75.75 0 0 0 .53-.219Z" clip-rule="evenodd"></path></svg><span>update</span></button><button title="shuffle" class="hover:opacity-50 p-2 flex items-center space-x-1"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon" class="w-6 h-6"><path d="M15.98 1.804a1 1 0 0 0-1.96 0l-.24 1.192a1 1 0 0 1-.784.785l-1.192.238a1 1 0 0 0 0 1.962l1.192.238a1 1 0 0 1 .785.785l.238 1.192a1 1 0 0 0 1.962 0l.238-1.192a1 1 0 0 1 .785-.785l1.192-.238a1 1 0 0 0 0-1.962l-1.192-.238a1 1 0 0 1-.785-.785l-.238-1.192ZM6.949 5.684a1 1 0 0 0-1.898 0l-.683 2.051a1 1 0 0 1-.633.633l-2.051.683a1 1 0 0 0 0 1.898l2.051.684a1 1 0 0 1 .633.632l.683 2.051a1 1 0 0 0 1.898 0l.683-2.051a1 1 0 0 1 .633-.633l2.051-.683a1 1 0 0 0 0-1.898l-2.051-.683a1 1 0 0 1-.633-.633L6.95 5.684ZM13.949 13.684a1 1 0 0 0-1.898 0l-.184.551a1 1 0 0 1-.632.633l-.551.183a1 1 0 0 0 0 1.898l.551.183a1 1 0 0 1 .633.633l.183.551a1 1 0 0 0 1.898 0l.184-.551a1 1 0 0 1 .632-.633l.551-.183a1 1 0 0 0 0-1.898l-.551-.184a1 1 0 0 1-.633-.632l-.183-.551Z"></path></svg><span> shuffle</span></button><button title="share" class="cursor-pointer hover:opacity-50 flex items-center space-x-1 p-2"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon" class="w-6 h-6"><path d="M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z"></path><path d="M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z"></path></svg><span>share</span></button><a title="learn" href="https://strudel.cc/workshop/getting-started/" class="hover:opacity-50 flex items-center space-x-1 p-2"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon" class="w-6 h-6"><path fill-rule="evenodd" d="M9.664 1.319a.75.75 0 0 1 .672 0 41.059 41.059 0 0 1 8.198 5.424.75.75 0 0 1-.254 1.285 31.372 31.372 0 0 0-7.86 3.83.75.75 0 0 1-.84 0 31.508 31.508 0 0 0-2.08-1.287V9.394c0-.244.116-.463.302-.592a35.504 35.504 0 0 1 3.305-2.033.75.75 0 0 0-.714-1.319 37 37 0 0 0-3.446 2.12A2.216 2.216 0 0 0 6 9.393v.38a31.293 31.293 0 0 0-4.28-1.746.75.75 0 0 1-.254-1.285 41.059 41.059 0 0 1 8.198-5.424ZM6 11.459a29.848 29.848 0 0 0-2.455-1.158 41.029 41.029 0 0 0-.39 3.114.75.75 0 0 0 .419.74c.528.256 1.046.53 1.554.82-.21.324-.455.63-.739.914a.75.75 0 1 0 1.06 1.06c.37-.369.69-.77.96-1.193a26.61 26.61 0 0 1 3.095 2.348.75.75 0 0 0 .992 0 26.547 26.547 0 0 1 5.93-3.95.75.75 0 0 0 .42-.739 41.053 41.053 0 0 0-.39-3.114 29.925 29.925 0 0 0-5.199 2.801 2.25 2.25 0 0 1-2.514 0c-.41-.275-.826-.541-1.25-.797a6.985 6.985 0 0 1-1.084 3.45 26.503 26.503 0 0 0-1.281-.78A5.487 5.487 0 0 0 6 12v-.54Z" clip-rule="evenodd"></path></svg><span>learn</span></a></div></header><div class="grow flex relative overflow-hidden"><section class="text-gray-100 cursor-text pb-0 overflow-auto grow" id="code" style="display: block; font-size: 18px; font-family: monospace;"><div class="cm-editor cm-focused ͼ1 ͼ3 ͼ4 ͼou" style="background-color: transparent;"><div class="cm-announced" aria-live="polite"><div>Selection deleted</div></div><div tabindex="-1" class="cm-scroller" style="font-family: monospace;"><div class="cm-gutters" aria-hidden="true" style="min-height: 1010.2px; position: sticky;"><div class="cm-gutter cm-lineNumbers"><div class="cm-gutterElement" style="height: 0px; visibility: hidden; pointer-events: none;">99</div><div class="cm-gutterElement" style="height: 25.2px; margin-top: 4px;">1</div><div class="cm-gutterElement" style="height: 25.2px;">2</div><div class="cm-gutterElement" style="height: 25.2px;">3</div><div class="cm-gutterElement" style="height: 25.2px;">4</div><div class="cm-gutterElement" style="height: 25.2px;">5</div><div class="cm-gutterElement" style="height: 25.2px;">6</div><div class="cm-gutterElement" style="height: 25.2px;">7</div><div class="cm-gutterElement" style="height: 25.2px;">8</div><div class="cm-gutterElement" style="height: 25.2px;">9</div><div class="cm-gutterElement" style="height: 25.2px;">10</div><div class="cm-gutterElement" style="height: 25.2px;">11</div><div class="cm-gutterElement cm-activeLineGutter" style="height: 25.2px;">12</div><div class="cm-gutterElement" style="height: 25.2px;">13</div><div class="cm-gutterElement" style="height: 25.2px;">14</div><div class="cm-gutterElement" style="height: 25.2px;">15</div><div class="cm-gutterElement" style="height: 25.2px;">16</div><div class="cm-gutterElement" style="height: 25.2px;">17</div><div class="cm-gutterElement" style="height: 25.2px;">18</div><div class="cm-gutterElement" style="height: 25.2px;">19</div><div class="cm-gutterElement" style="height: 25.2px;">20</div><div class="cm-gutterElement" style="height: 25.2px;">21</div><div class="cm-gutterElement" style="height: 25.2px;">22</div><div class="cm-gutterElement" style="height: 25.2px;">23</div><div class="cm-gutterElement" style="height: 25.2px;">24</div><div class="cm-gutterElement" style="height: 25.2px;">25</div><div class="cm-gutterElement" style="height: 25.2px;">26</div></div></div><div style="tab-size: 4;" spellcheck="false" autocorrect="off" autocapitalize="none" translate="no" contenteditable="true" class="cm-content" role="textbox" aria-multiline="true" data-language="javascript"><div class="cm-line"><span class="ͼp5">samples</span><span class="ͼp7">(</span><span class="ͼp7">{</span></div><div class="cm-line">  <span class="ͼpa ͼl">og</span><span class="ͼpd">:</span> <span class="ͼp2 ͼe">'OG/13-13_crying-200106_1552-014.wav'</span><span class="ͼpd">,</span></div><div class="cm-line">  <span class="ͼpa ͼl">ts</span><span class="ͼpd">:</span> <span class="ͼp2 ͼe">'TTS/13-13_crying-200106_1552-014_TTS_output.wav'</span></div><div class="cm-line"> </div><div class="cm-line"><span class="ͼp7">}</span><span class="ͼpd">,</span> <span class="ͼp2 ͼe">'github:kelseyicotton/sounds'</span><span class="ͼp7">)</span><span class="ͼpd">;</span></div><div class="cm-line"><br></div><div class="cm-line"><span class="ͼp5">stack</span><span class="ͼp7">(</span></div><div class="cm-line">  <span class="ͼp4 ͼm">//note("45").s("og"),</span></div><div class="cm-line">  <span class="ͼp5">s</span><span class="ͼp7">(</span><span class="ͼp2 ͼe">"og"</span><span class="ͼp7">)</span></div><div class="cm-line">  <span class="ͼp4 ͼm">//.gain("0.135")</span></div><div class="cm-line">  <span class="ͼp4 ͼm">//.seq(</span></div><div class="cm-activeLine cm-line">  <span class="ͼp4 ͼm">//note("c1(5,8)").s("og"))</span></div><div class="cm-line">  </div><div class="cm-line">  <span class="ͼow">.</span><span class="ͼpa">color</span><span class="ͼp7">(</span><span class="ͼp2 ͼe">'cyan'</span><span class="ͼp7">)</span><span class="ͼpd">,</span></div><div class="cm-line">  <span class="ͼp4 ͼm">//cat(</span></div><div class="cm-line">    <span class="ͼp4 ͼm">//s("ts:3 og").note("c1 c1"),</span></div><div class="cm-line">    <span class="ͼp4 ͼm">//s("ts*4").note("c4 e4"),</span></div><div class="cm-line"><span class="ͼp4 ͼm">//).decay("&lt;.1 .2 .3 .4&gt;").sustain(0)</span></div><div class="cm-line">  <span class="ͼp7">)</span></div><div class="cm-line"><br></div><div class="cm-line"><br></div><div class="cm-line">  </div><div class="cm-line"><br></div><div class="cm-line">  <span class="ͼp4 ͼm">// going to be a little bit mmore pear-ful? 🍐🍐🍐🍐🍐</span></div><div class="cm-line"><br></div><div class="cm-line"><span class="ͼow">.</span><span class="ͼpa">pianoroll</span><span class="ͼp7">(</span><span class="ͼp7">{</span><span class="ͼpa ͼl">fold</span><span class="ͼpd">:</span><span class="ͼp0 ͼd">35</span><span class="ͼpd">,</span> <span class="ͼpa ͼl">spread</span><span class="ͼpd">:</span><span class="ͼp0 ͼd">2</span><span class="ͼp7">}</span><span class="ͼp7">)</span></div></div><div class="cm-layer cm-layer-above cm-cursorLayer" aria-hidden="true" style="z-index: 150; animation-duration: 0ms; animation-name: cm-blink2;"><div class="cm-cursor cm-cursor-primary" style="left: 73.4px; top: 293px; height: 21.6px;"></div></div><div class="cm-layer cm-selectionLayer" aria-hidden="true" style="z-index: -2;"></div></div></div></section><nav class="bg-lineHighlight z-[10] flex flex-col max-w-full flex-grow-0 flex-none overflow-hidden w-[600px] h-full"><div class="flex justify-between px-2"><div class="flex select-none max-w-full overflow-auto pb-2"><div class="h-8 px-2 text-foreground cursor-pointer hover:opacity-50 flex items-center space-x-1 border-b border-transparent">welcome</div><div class="h-8 px-2 text-foreground cursor-pointer hover:opacity-50 flex items-center space-x-1 border-b border-transparent">patterns</div><div class="h-8 px-2 text-foreground cursor-pointer hover:opacity-50 flex items-center space-x-1 border-b border-transparent">sounds</div><div class="h-8 px-2 text-foreground cursor-pointer hover:opacity-50 flex items-center space-x-1 border-b border-transparent">console</div><div class="h-8 px-2 text-foreground cursor-pointer hover:opacity-50 flex items-center space-x-1 border-b border-foreground">reference</div><div class="h-8 px-2 text-foreground cursor-pointer hover:opacity-50 flex items-center space-x-1 border-b border-transparent">settings</div></div><button class="text-foreground px-2" aria-label="Close Panel"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon" class="w-5 h-5"><path d="M6.28 5.22a.75.75 0 0 0-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 1 0 1.06 1.06L10 11.06l3.72 3.72a.75.75 0 1 0 1.06-1.06L11.06 10l3.72-3.72a.75.75 0 0 0-1.06-1.06L10 8.94 6.28 5.22Z"></path></svg></button></div><div class="relative overflow-hidden"><div class="text-white overflow-auto h-full max-w-full"><div class="flex h-full w-full pt-2 text-foreground overflow-hidden"><div class="w-42 flex-none h-full overflow-y-auto overflow-x-hidden pr-4"><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">accelerate </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">add </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">addVoicings </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">adsr </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">almostAlways </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">almostNever </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">always </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">amp </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">appBoth </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">appLeft </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">apply </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">applyGradualLowpass </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">appRight </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">appWhole </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">arp </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">arpWith </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">arrange </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">attack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bank </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">begin </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bpattack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bpdecay </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bpenv </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bpf </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bpq </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bprelease </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">bpsustain </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">brak </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">cat </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">cat </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">ceil </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">channel </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">channels </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">choose </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">choose </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">choose2 </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">chooseCycles </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">chooseInWith </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">chooseWith </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">chop </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">chunk </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">chunkBack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">clip </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">coarse </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">color </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">compress </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">compressor </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">cosine </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">cpm </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">crush </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">csoundm </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">cut </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">decay </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">defragmentHaps </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">degrade </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">degradeBy </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">delay </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">delayfeedback </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">delaytime </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">detune </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">discreteOnly </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">distort </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">div </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">djf </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">drawLine </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">dry </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">duration </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">early </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">echo </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">echoWith </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">end </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">euclid </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">euclidLegato </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">euclidLegatoRot </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">euclidRot </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">every </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fast </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fastChunk </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fastGap </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">filterHaps </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">filterValues </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">firstCycle </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">firstCycleValues </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">firstOf </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fit </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">floor </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fm </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fmap </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fmattack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fmdecay </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fmenv </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fmh </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fmsustain </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">focus </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">freq </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fromBipolar </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">fscope </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">ftype </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">gain </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">generateGraph </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">generateReverb </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hpattack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hpdecay </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hpenv </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hpf </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hpq </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hprelease </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hpsustain </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hurry </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">hush </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">inhabit </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">inhabitmod </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">inside </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">invert </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">irand </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">iresponse </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">iter </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">iterBack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">jux </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">juxBy </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">label </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lastOf </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">late </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">layer </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">leslie </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">linger </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">loop </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">loopAt </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">loopAtCps </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">loopBegin </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">loopEnd </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lpattack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lpdecay </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lpenv </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lpf </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lpq </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lprelease </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lpsustain </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lrate </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">lsize </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">mask </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">mul </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">n </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">never </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">noise </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">note </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">octave </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">off </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">often </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">onsetsOnly </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">orbit </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">osc </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">outside </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">palindrome </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pan </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">panchor </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pattack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">Pattern </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pcurve </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pdecay </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">penv </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">perlin </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">phaser </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">phasercenter </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">phaserdepth </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">phasersweep </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pianoroll </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pick </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickF </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickmod </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickmodF </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickmodOut </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickmodReset </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickmodRestart </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickOut </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickReset </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pickRestart </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">ply </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">polymeter </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">polymeterSteps </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">postgain </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">prelease </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">press </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pressBy </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">pure </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">queryArc </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">rand </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">rand2 </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">range </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">range2 </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">rangex </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">rarely </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">ratio </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">ref </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">register </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">release </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">removeUndefineds </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">repeatCycles </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">reset </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">restart </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">rev </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">ribbon </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">room </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">roomdim </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">roomfade </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">roomlp </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">roomsize </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">rootNotes </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">round </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">run </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">s </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">samples </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">saw </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">scale </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">scaleTranspose </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">scope </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">segment </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">seq </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">seq </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">sequence </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">setContext </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">shape </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">showFirstCycle </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">silence </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">sine </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">slice </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">slider </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">slow </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">slowcat </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">slowcatPrime </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">someCycles </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">someCyclesBy </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">sometimes </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">sometimesBy </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">sortHapsByPart </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">source </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">speed </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">splice </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">splitQueries </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">square </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">squeeze </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">squiz </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">stack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">stack </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">striate </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">stripContext </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">struct </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">stut </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">sub </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">superimpose </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">sustain </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">timeCat </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">toBipolar </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">transpose </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">tri </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">undegradeBy </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">unit </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">velocity </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">vib </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">vibmod </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">voicing </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">voicings </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">vowel </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">when </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withContext </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withHap </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withHaps </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withHapSpan </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withHapTime </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withLoc </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withQuerySpan </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withQueryTime </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">withValue </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">wordfall </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">xfade </a><a class="cursor-pointer block hover:bg-lineHighlight py-1 px-4">zoom </a></div><div class="break-normal w-full h-full overflow-auto pl-4 flex relative" id="reference-container"><div class="prose dark:prose-invert max-w-full pr-4"><h2>API Reference</h2><p>This
 is the long list functions you can use! Remember that you don't need to
 remember all of those and that you can already make music with a small 
set of functions!</p><section><h3 id="doc-0">accelerate</h3><p><p>A pattern of numbers that speed up (or slow down) samples while they play. Currently only supported by osc / superdirt.</p></p><ul><li>amount : number | Pattern  - acceleration.</li></ul><pre>s("sax").accelerate("&lt;0 1 2 4 8 16&gt;").slow(2).osc()</pre></section><section><h3 id="doc-1">add</h3><p><p>Assumes a pattern of numbers. Adds the given number to each item in the pattern.</p></p><ul></ul><pre>// Here, the triad 0, 2, 4 is shifted by different amounts
n("0 2 4".add("&lt;0 3 4 0&gt;")).scale("C:major")
// Without add, the equivalent would be:
// n("&lt;[0 2 4] [3 5 7] [4 6 8] [0 2 4]&gt;").scale("C:major")</pre><pre>// You can also use add with notes:
note("c3 e3 g3".add("&lt;0 5 7 0&gt;"))
// Behind the scenes, the notes are converted to midi numbers:
// note("48 52 55".add("&lt;0 5 7 0&gt;"))</pre></section><section><h3 id="doc-2">addVoicings</h3><p><p>Adds a new custom voicing dictionary.</p></p><ul><li>name : string  - identifier for the voicing dictionary</li><li>dictionary : Object  - maps chord symbol to possible voicings</li><li>range : Array  - min, max note</li></ul><pre>addVoicings('cookie', {
  7: ['3M 7m 9M 12P 15P', '7m 10M 13M 16M 19P'],
  '^7': ['3M 6M 9M 12P 14M', '7M 10M 13M 16M 19P'],
  m7: ['8P 11P 14m 17m 19P', '5P 8P 11P 14m 17m'],
  m7b5: ['3m 5d 8P 11P 14m', '5d 8P 11P 14m 17m'],
  o7: ['3m 6M 9M 11A 15P'],
  '7alt': ['3M 7m 10m 13m 15P'],
  '7#11': ['7m 10m 13m 15P 17m'],
}, ['C3', 'C6'])
"&lt;C^7 A7 Dm7 G7&gt;".voicings('cookie').note()</pre></section><section><h3 id="doc-3">adsr</h3><p><p>ADSR envelope: Combination of Attack, Decay, Sustain, and Release.</p></p><ul><li>time : number | Pattern  - attack time in seconds</li><li>time : number | Pattern  - decay time in seconds</li><li>gain : number | Pattern  - sustain level (0 to 1)</li><li>time : number | Pattern  - release time in seconds</li></ul><pre>note("[c3 bb2 f3 eb3]*2").sound("sawtooth").lpf(600).adsr(".1:.1:.5:.2")</pre></section><section><h3 id="doc-4">almostAlways</h3><p><p>Shorthand for <code>.sometimesBy(0.9, fn)</code></p></p><ul></ul><pre>s("hh*8").almostAlways(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-5">almostNever</h3><p><p>Shorthand for <code>.sometimesBy(0.1, fn)</code></p></p><ul></ul><pre>s("hh*8").almostNever(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-6">always</h3><p><p>Shorthand for <code>.sometimesBy(1, fn)</code> (always calls fn)</p></p><ul></ul><pre>s("hh*8").always(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-7">amp</h3><p><p>Like <code>gain</code>, but linear.</p></p><ul><li>amount : number | Pattern  - gain.</li></ul><pre>s("bd*8").amp(".1*2 .5 .1*2 .5 .1 .5").osc()</pre></section><section><h3 id="doc-8">appBoth</h3><p><p>When this method is called on a pattern of functions, it matches its haps
with those in the given pattern of values.  A new pattern is returned, with
each matching value applied to the corresponding function.</p>
<p>In this <code>_appBoth</code> variant, where timespans of the function and value haps
are not the same but do intersect, the resulting hap has a timespan of the
intersection. This applies to both the part and the whole timespan.</p></p><ul><li>pat_val : Pattern </li></ul></section><section><h3 id="doc-9">appLeft</h3><p><p>As with <code>appBoth</code>, but the <code>whole</code> timespan is not the intersection,
but the timespan from the function of patterns that this method is called
on. In practice, this means that the pattern structure, including onsets,
are preserved from the pattern of functions (often referred to as the left
hand or inner pattern).</p></p><ul><li>pat_val : Pattern </li></ul></section><section><h3 id="doc-10">apply</h3><p><p>Like layer, but with a single function:</p></p><ul></ul><pre>"&lt;c3 eb3 g3&gt;".scale('C minor').apply(scaleTranspose("0,2,4")).note()</pre></section><section><h3 id="doc-11">applyGradualLowpass</h3><p><p>Applies a constantly changing lowpass filter to the given sound.</p></p><ul><li>input : AudioBuffer </li><li>lpFreqStart : number </li><li>lpFreqEnd : number </li><li>lpFreqEndAt : number </li><li>callback : function  - May be called
immediately within the current execution context, or later.</li></ul></section><section><h3 id="doc-12">appRight</h3><p><p>As with <code>appLeft</code>, but <code>whole</code> timespans are instead taken from the
pattern of values, i.e. structure is preserved from the right hand/outer
pattern.</p></p><ul><li>pat_val : Pattern </li></ul></section><section><h3 id="doc-13">appWhole</h3><p><p>Assumes 'this' is a pattern of functions, and given a function to
resolve wholes, applies a given pattern of values to that
pattern of functions.</p></p><ul><li>whole_func : function </li><li>func : function </li></ul></section><section><h3 id="doc-14">arp</h3><p><p>Selects indices in in stacked notes.</p></p><ul></ul><pre>note("&lt;[c,eb,g]!2 [c,f,ab] [d,f,ab]&gt;")
.arp("0 [0,2] 1 [0,2]")</pre></section><section><h3 id="doc-15">arpWith</h3><p><p>Selects indices in in stacked notes.</p></p><ul></ul><pre>note("&lt;[c,eb,g]!2 [c,f,ab] [d,f,ab]&gt;")
.arpWith(haps =&gt; haps[2])</pre></section><section><h3 id="doc-16">arrange</h3><p><p>Allows to arrange multiple patterns together over multiple cycles.
Takes a variable number of arrays with two elements specifying the number of cycles and the pattern to use.</p></p><ul></ul><pre>arrange(
  [4, "&lt;c a f e&gt;(3,8)"],
  [2, "&lt;g a&gt;(5,8)"]
).note()</pre></section><section><h3 id="doc-17">attack</h3><p>Synonyms: <code>att</code></p><p><p>Amplitude envelope attack time: Specifies how long it takes for the sound to reach its peak value, relative to the onset.</p></p><ul><li>attack : number | Pattern  - time in seconds.</li></ul><pre>note("c3 e3 f3 g3").attack("&lt;0 .1 .5&gt;")</pre></section><section><h3 id="doc-18">bank</h3><p><p>Select the sound bank to use. To be used together with <code>s</code>. The bank name (+ "_") will be prepended to the value of <code>s</code>.</p></p><ul><li>bank : string | Pattern  - the name of the bank</li></ul><pre>s("bd sd [~ bd] sd").bank('RolandTR909') // = s("RolandTR909_bd RolandTR909_sd")</pre></section><section><h3 id="doc-19">begin</h3><p><p>a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. <code>0.25</code> to cut off the first quarter from each sample.</p></p><ul><li>amount : number | Pattern  - between 0 and 1, where 1 is the length of the sample</li></ul><pre>samples({ rave: 'rave/AREUREADY.wav' }, 'github:tidalcycles/dirt-samples')
s("rave").begin("&lt;0 .25 .5 .75&gt;").fast(2)</pre></section><section><h3 id="doc-20">bpattack</h3><p>Synonyms: <code>bpa</code></p><p><p>Sets the attack duration for the bandpass filter envelope.</p></p><ul><li>attack : number | Pattern  - time of the bandpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.bpf(500)
.bpa("&lt;.5 .25 .1 .01&gt;/4")
.bpenv(4)</pre></section><section><h3 id="doc-21">bpdecay</h3><p>Synonyms: <code>bpd</code></p><p><p>Sets the decay duration for the bandpass filter envelope.</p></p><ul><li>decay : number | Pattern  - time of the bandpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.bpf(500)
.bpd("&lt;.5 .25 .1 0&gt;/4")
.bps(0.2)
.bpenv(4)</pre></section><section><h3 id="doc-22">bpenv</h3><p>Synonyms: <code>bpe</code></p><p><p>Sets the bandpass filter envelope modulation depth.</p></p><ul><li>modulation : number | Pattern  - depth of the bandpass filter envelope between 0 and n</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.bpf(500)
.bpa(.5)
.bpenv("&lt;4 2 1 0 -1 -2 -4&gt;/4")</pre></section><section><h3 id="doc-23">bpf</h3><p>Synonyms: <code>bandf, bp</code></p><p><p>Sets the center frequency of the <strong>b</strong>and-<strong>p</strong>ass <strong>f</strong>ilter. When using mininotation, you
can also optionally supply the 'bpq' parameter separated by ':'.</p></p><ul><li>frequency : number | Pattern  - center frequency</li></ul><pre>s("bd sd [~ bd] sd,hh*6").bpf("&lt;1000 2000 4000 8000&gt;")</pre></section><section><h3 id="doc-24">bpq</h3><p>Synonyms: <code>bandq</code></p><p><p>Sets the <strong>b</strong>and-<strong>p</strong>ass <strong>q</strong>-factor (resonance).</p></p><ul><li>q : number | Pattern  - q factor</li></ul><pre>s("bd sd [~ bd] sd").bpf(500).bpq("&lt;0 1 2 3&gt;")</pre></section><section><h3 id="doc-25">bprelease</h3><p>Synonyms: <code>bpr</code></p><p><p>Sets the release time for the bandpass filter envelope.</p></p><ul><li>release : number | Pattern  - time of the bandpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.clip(.5)
.bpf(500)
.bpenv(4)
.bpr("&lt;.5 .25 .1 0&gt;/4")
.release(.5)</pre></section><section><h3 id="doc-26">bpsustain</h3><p>Synonyms: <code>bps</code></p><p><p>Sets the sustain amplitude for the bandpass filter envelope.</p></p><ul><li>sustain : number | Pattern  - amplitude of the bandpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.bpf(500)
.bpd(.5)
.bps("&lt;0 .25 .5 1&gt;/4")
.bpenv(4)</pre></section><section><h3 id="doc-27">brak</h3><p><p>Returns a new pattern where every other cycle is played once, twice as
fast, and offset in time by one quarter of a cycle. Creates a kind of
breakbeat feel.</p></p><ul></ul></section><section><h3 id="doc-28">cat</h3><p>Synonyms: <code>slowcat</code></p><p><p>Appends the given pattern(s) to the next cycle.</p></p><ul></ul><pre>s("hh*4").cat(
  note("c4(5,8)")
)</pre></section><section><h3 id="doc-29">cat</h3><p>Synonyms: <code>slowcat</code></p><p><p>The given items are con<strong>cat</strong>enated, where each one takes one cycle.</p></p><ul><li>items : any  - The items to concatenate</li></ul><pre>cat("e5", "b4", ["d5", "c5"]).note()
// "&lt;e5 b4 [d5 c5]&gt;".note()</pre></section><section><h3 id="doc-30">ceil</h3><p><p>Assumes a numerical pattern. Returns a new pattern with all values set to
their mathematical ceiling. E.g. <code>3.2</code> replaced with <code>4</code>, and <code>-4.2</code>
replaced with <code>-4</code>.</p></p><ul></ul><pre>note("42 42.1 42.5 43".ceil())</pre></section><section><h3 id="doc-31">channel</h3><p><p>choose the channel the pattern is sent to in superdirt</p></p><ul><li>channel : number | Pattern  - channel number</li></ul></section><section><h3 id="doc-32">channels</h3><p>Synonyms: <code>ch</code></p><p><p>Allows you to set the output channels on the interface</p></p><ul><li>channels : number | Pattern  - pattern the output channels</li></ul><pre>note("e a d b g").channels("3:4")</pre></section><section><h3 id="doc-33">choose</h3><p><p>Chooses randomly from the given list of elements.</p></p><ul><li>xs : any  - values / patterns to choose from.</li></ul></section><section><h3 id="doc-34">choose</h3><p><p>Chooses from the given list of values (or patterns of values), according
to the pattern that the method is called on. The pattern should be in
the range 0 .. 1.</p></p><ul><li>xs : any </li></ul></section><section><h3 id="doc-35">choose2</h3><p><p>As with choose, but the pattern that this method is called on should be
in the range -1 .. 1</p></p><ul><li>xs : any </li></ul></section><section><h3 id="doc-36">chooseCycles</h3><p><p>Picks one of the elements at random each cycle.</p></p><ul></ul><pre>chooseCycles("bd", "hh", "sd").s().fast(8)</pre><pre>s("bd | hh | sd").fast(8)</pre></section><section><h3 id="doc-37">chooseInWith</h3><p><p>As with {chooseWith}, but the structure comes from the chosen values, rather
than the pattern you're using to choose with.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-38">chooseWith</h3><p><p>Choose from the list of values (or patterns of values) using the given
pattern of numbers, which should be in the range of 0..1</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul><pre>note("c2 g2!2 d2 f1").s(chooseWith(sine.fast(2), ["sawtooth", "triangle", "bd:6"]))</pre></section><section><h3 id="doc-39">chop</h3><p><p>Cuts each sample into the given number of parts, allowing you to explore a technique known as 'granular synthesis'.
It turns a pattern of samples into a pattern of parts of samples.</p></p><ul></ul><pre>samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })
s("rhodes")
 .chop(4)
 .rev() // reverse order of chops
 .loopAt(2) // fit sample into 2 cycles</pre></section><section><h3 id="doc-40">chunk</h3><p>Synonyms: <code>slowChunk, slowchunk</code></p><p><p>Divides
 a pattern into a given number of parts, then cycles through those parts
 in turn, applying the given function to each part in turn (one part per
 cycle).</p></p><ul></ul><pre>"0 1 2 3".chunk(4, x=&gt;x.add(7))
.scale("A:minor").note()</pre></section><section><h3 id="doc-41">chunkBack</h3><p>Synonyms: <code>chunkback</code></p><p><p>Like <code>chunk</code>, but cycles through the parts in reverse order. Known as chunk' in tidalcycles</p></p><ul></ul><pre>"0 1 2 3".chunkBack(4, x=&gt;x.add(7))
.scale("A:minor").note()</pre></section><section><h3 id="doc-42">clip</h3><p>Synonyms: <code>legato</code></p><p><p>Multiplies the duration with the given number. Also cuts samples off at the end if they exceed the duration.</p></p><ul><li>factor : number | Pattern  - 
= 0
</li></ul><pre>note("c a f e").s("piano").clip("&lt;.5 1 2&gt;")</pre></section><section><h3 id="doc-43">coarse</h3><p><p>fake-resampling for lowering the sample rate. Caution: This effect seems to only work in chromium based browsers</p></p><ul><li>factor : number | Pattern  - 1 for original 2 for half, 3 for a third and so on.</li></ul><pre>s("bd sd [~ bd] sd,hh*8").coarse("&lt;1 4 8 16 32&gt;")</pre></section><section><h3 id="doc-44">color</h3><p>Synonyms: <code>colour</code></p><p><p>Sets the color of the hap in visualizations like pianoroll or highlighting.</p></p><ul><li>color : string  - Hexadecimal or CSS color name</li></ul></section><section><h3 id="doc-45">compress</h3><p><p>Compress each cycle into the given timespan, leaving a gap</p></p><ul></ul><pre>cat(
  s("bd sd").compress(.25,.75),
  s("~ bd sd ~")
)</pre></section><section><h3 id="doc-46">compressor</h3><p><p>Dynamics Compressor. The params are <code>compressor("threshold:ratio:knee:attack:release")</code>
More info <a href="https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode?retiredLocale=de#instance_properties">here</a></p></p><ul></ul><pre>s("bd sd [~ bd] sd,hh*8")
.compressor("-20:20:10:.002:.02")</pre></section><section><h3 id="doc-47">cosine</h3><p><p>A cosine signal between 0 and 1.</p></p><ul></ul><pre>n(stack(sine,cosine).segment(16).range(0,15))
.scale("C:minor")</pre></section><section><h3 id="doc-48">cpm</h3><p><p>Plays the pattern at the given cycles per minute.</p></p><ul></ul><pre>s("&lt;bd sd&gt;,hh*2").cpm(90) // = 90 bpm</pre></section><section><h3 id="doc-49">crush</h3><p><p>bit crusher effect.</p></p><ul><li>depth : number | Pattern  - between 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).</li></ul><pre>s("&lt;bd sd&gt;,hh*3").fast(2).crush("&lt;16 8 7 6 5 4 3 2&gt;")</pre></section><section><h3 id="doc-50">csoundm</h3><p><p>Sends notes to Csound for rendering with MIDI semantics. The hap value is
translated to these Csound pfields:</p>
<p>p1 -- Csound instrument either as a number (1-based, can be a fraction),
or as a string name.
p2 -- time in beats (usually seconds) from start of performance.
p3 -- duration in beats (usually seconds).
p4 -- MIDI key number (as a real number, not an integer but in [0, 127].
p5 -- MIDI velocity (as a real number, not an integer but in [0, 127].
p6 -- Strudel controls, as a string.</p></p><ul></ul></section><section><h3 id="doc-51">cut</h3><p><p>In the style of classic drum-machines, <code>cut</code>
 will stop a playing sample as soon as another samples with in same 
cutgroup is to be played. An example would be an open hi-hat followed by
 a closed one, essentially muting the open.</p></p><ul><li>group : number | Pattern  - cut group number</li></ul><pre>s("[oh hh]*4").cut(1)</pre></section><section><h3 id="doc-52">decay</h3><p><p>Amplitude envelope decay time: the time it takes after the attack time to reach the sustain level.
Note that the decay is only audible if the sustain value is lower than 1.</p></p><ul><li>time : number | Pattern  - decay time in seconds</li></ul><pre>note("c3 e3 f3 g3").decay("&lt;.1 .2 .3 .4&gt;").sustain(0)</pre></section><section><h3 id="doc-53">defragmentHaps</h3><p><p>Combines adjacent haps with the same value and whole.  Only
intended for use in tests.</p></p><ul></ul></section><section><h3 id="doc-54">degrade</h3><p><p>Randomly removes 50% of events from the pattern. Shorthand for <code>.degradeBy(0.5)</code></p></p><ul></ul><pre>s("hh*8").degrade()</pre><pre>s("[hh?]*8")</pre></section><section><h3 id="doc-55">degradeBy</h3><p><p>Randomly removes events from the pattern by a given amount.
0 = 0% chance of removal
1 = 100% chance of removal</p></p><ul><li>amount : number  - a number between 0 and 1</li></ul><pre>s("hh*8").degradeBy(0.2)</pre><pre>s("[hh?0.2]*8")</pre></section><section><h3 id="doc-56">delay</h3><p><p>Sets the level of the delay signal.</p>
<p>When using mininotation, you can also optionally add the 'delaytime' and 'delayfeedback' parameter,
separated by ':'.</p></p><ul><li>level : number | Pattern  - between 0 and 1</li></ul><pre>s("bd bd").delay("&lt;0 .25 .5 1&gt;")</pre><pre>s("bd bd").delay("0.65:0.25:0.9 0.65:0.125:0.7")</pre></section><section><h3 id="doc-57">delayfeedback</h3><p>Synonyms: <code>delayfb, dfb</code></p><p><p>Sets the level of the signal that is fed back into the delay.
Caution: Values &gt;= 1 will result in a signal that gets louder and louder! Don't do it</p></p><ul><li>feedback : number | Pattern  - between 0 and 1</li></ul><pre>s("bd").delay(.25).delayfeedback("&lt;.25 .5 .75 1&gt;")</pre></section><section><h3 id="doc-58">delaytime</h3><p>Synonyms: <code>delayt, dt</code></p><p><p>Sets the time of the delay effect.</p></p><ul><li>seconds : number | Pattern  - between 0 and Infinity</li></ul><pre>s("bd bd").delay(.25).delaytime("&lt;.125 .25 .5 1&gt;")</pre></section><section><h3 id="doc-59">detune</h3><p>Synonyms: <code>det</code></p><p><p>Set detune of oscillators. Works only with some synths, see <a target="_blank" href="https://tidalcycles.org/docs/patternlib/tutorials/synthesizers">tidal doc</a></p></p><ul><li>amount : number | Pattern  - between 0 and 1</li></ul><pre>n("0 3 7").s('superzow').octave(3).detune("&lt;0 .25 .5 1 2&gt;").osc()</pre></section><section><h3 id="doc-60">discreteOnly</h3><p><p>Returns a new pattern, with 'continuous' haps (those without 'whole'
timespans) removed from query results.</p></p><ul></ul></section><section><h3 id="doc-61">distort</h3><p>Synonyms: <code>dist</code></p><p><p>Wave
 shaping distortion. CAUTION: it can get loud.
Second option in optional array syntax (ex: ".9:.5") applies a postgain 
to the output.
Most useful values are usually between 0 and 10 (depending on source 
gain). If you are feeling adventurous, you can turn it up to 11 and 
beyond ;)</p></p><ul><li>distortion : number | Pattern </li></ul><pre>s("bd sd [~ bd] sd,hh*8").distort("&lt;0 2 3 10:.5&gt;")</pre><pre>note("d1!8").s("sine").penv(36).pdecay(.12).decay(.23).distort("8:.4")</pre></section><section><h3 id="doc-62">div</h3><p><p>Divides each number by the given factor.</p></p><ul></ul></section><section><h3 id="doc-63">djf</h3><p><p>DJ filter, below 0.5 is low pass filter, above is high pass filter.</p></p><ul><li>cutoff : number | Pattern  - below 0.5 is low pass filter, above is high pass filter</li></ul><pre>n("0 3 7 [10,24]").s('superzow').octave(3).djf("&lt;.5 .25 .5 .75&gt;").osc()</pre></section><section><h3 id="doc-64">drawLine</h3><p><p>Intended for a debugging, drawLine renders the pattern as a string, where each character represents the same time span.
Should only be used with single characters as values, otherwise the character slots will be messed up.
Character legend:</p>
<ul>
<li>"|" cycle separator</li>
<li>"-" hold previous value</li>
<li>"." silence</li>
</ul></p><ul><li>pattern : Pattern  - the pattern to use</li><li>chars : number  - max number of characters (approximately)</li></ul><pre>const line = drawLine("0 [1 2 3]", 10); // |0--123|0--123
console.log(line);
silence;</pre></section><section><h3 id="doc-65">dry</h3><p><p>Set dryness of reverb. See <code>room</code> and <code>size</code> for more information about reverb.</p></p><ul><li>dry : number | Pattern  - 0 = wet, 1 = dry</li></ul><pre>n("[0,3,7](3,8)").s("superpiano").room(.7).dry("&lt;0 .5 .75 1&gt;").osc()</pre></section><section><h3 id="doc-66">duration</h3><p>Synonyms: <code>dur</code></p><p><p>Sets
 the duration of the event in cycles. Similar to clip / legato, it also 
cuts samples off at the end if they exceed the duration.</p></p><ul><li>seconds : number | Pattern  - 
= 0
</li></ul><pre>note("c a f e").s("piano").dur("&lt;.5 1 2&gt;")</pre></section><section><h3 id="doc-67">early</h3><p><p>Nudge a pattern to start earlier in time. Equivalent of Tidal's &lt;~ operator</p></p><ul><li>cycles : number | Pattern  - number of cycles to nudge left</li></ul><pre>"bd ~".stack("hh ~".early(.1)).s()</pre></section><section><h3 id="doc-68">echo</h3><p><p>Superimpose and offset multiple times, gradually decreasing the velocity</p></p><ul><li>times : number  - how many times to repeat</li><li>time : number  - cycle offset between iterations</li><li>feedback : number  - velocity multiplicator for each iteration</li></ul><pre>s("bd sd").echo(3, 1/6, .8)</pre></section><section><h3 id="doc-69">echoWith</h3><p>Synonyms: <code>echowith, stutWith, stutwith</code></p><p><p>Superimpose and offset multiple times, applying the given function each time.</p></p><ul><li>times : number  - how many times to repeat</li><li>time : number  - cycle offset between iterations</li><li>func : function  - function to apply, given the pattern and the iteration index</li></ul><pre>"&lt;0 [2 4]&gt;"
.echoWith(4, 1/8, (p,n) =&gt; p.add(n*2))
.scale("C:minor").note()</pre></section><section><h3 id="doc-70">end</h3><p><p>The same as .begin, but cuts off the end off each sample.</p></p><ul><li>length : number | Pattern  - 1 = whole sample, .5 = half sample, .25 = quarter sample etc..</li></ul><pre>s("bd*2,oh*4").end("&lt;.1 .2 .5 1&gt;").fast(2)</pre></section><section><h3 id="doc-71">euclid</h3><p><p>Changes the structure of the pattern to form an euclidean rhythm.
Euclidian rhythms are rhythms obtained using the greatest common
divisor of two numbers.  They were described in 2004 by Godfried
Toussaint, a canadian computer scientist.  Euclidian rhythms are
really useful for computer/algorithmic music because they can
describe a large number of rhythms with a couple of numbers.</p></p><ul><li>pulses : number  - the number of onsets / beats</li><li>steps : number  - the number of steps to fill</li></ul><pre>// The Cuban tresillo pattern.
note("c3").euclid(3,8)</pre></section><section><h3 id="doc-72">euclidLegato</h3><p><p>Similar to <code>euclid</code>, but each pulse is held until the next pulse,
so there will be no gaps.</p></p><ul><li>pulses : number  - the number of onsets / beats</li><li>steps : number  - the number of steps to fill</li></ul><pre>note("c3").euclidLegato(3,8)</pre></section><section><h3 id="doc-73">euclidLegatoRot</h3><p><p>Similar to <code>euclid</code>, but each pulse is held until the next pulse,
so there will be no gaps, and has an additional parameter for 'rotating'
the resulting sequence</p></p><ul><li>pulses : number  - the number of onsets / beats</li><li>steps : number  - the number of steps to fill</li><li>rotation : number  - offset in steps</li></ul><pre>note("c3").euclidLegatoRot(3,5,2)</pre></section><section><h3 id="doc-74">euclidRot</h3><p><p>Like <code>euclid</code>, but has an additional parameter for 'rotating' the resulting sequence.</p></p><ul><li>pulses : number  - the number of onsets / beats</li><li>steps : number  - the number of steps to fill</li><li>rotation : number  - offset in steps</li></ul><pre>// A Samba rhythm necklace from Brazil
note("c3").euclidRot(3,16,14)</pre></section><section><h3 id="doc-75">every</h3><p><p>An alias for <code>firstOf</code></p></p><ul><li>n : number  - how many cycles</li><li>func : function  - function to apply</li></ul><pre>note("c3 d3 e3 g3").every(4, x=&gt;x.rev())</pre></section><section><h3 id="doc-76">fast</h3><p>Synonyms: <code>density</code></p><p><p>Speed up a pattern by the given factor. Used by "*" in mini notation.</p></p><ul><li>factor : number | Pattern  - speed up factor</li></ul><pre>s("bd hh sd hh").fast(2) // s("[bd hh sd hh]*2")</pre></section><section><h3 id="doc-77">fastChunk</h3><p>Synonyms: <code>fastchunk</code></p><p><p>Like <code>chunk</code>, but the cycles of the source pattern aren't repeated
for each set of chunks.</p></p><ul></ul><pre>"&lt;0 8&gt; 1 2 3 4 5 6 7"
.fastChunk(4, x =&gt; x.color('red')).slow(2)
.scale("C2:major").note()</pre></section><section><h3 id="doc-78">fastGap</h3><p>Synonyms: <code>fastgap</code></p><p><p>speeds
 up a pattern like fast, but rather than it playing multiple times as 
fast would it instead leaves a gap in the remaining space of the cycle. 
For example, the following will play the sound pattern "bd sn" only once
 but compressed into the first half of the cycle, i.e. twice as fast.</p></p><ul></ul><pre>s("bd sd").fastGap(2)</pre></section><section><h3 id="doc-79">filterHaps</h3><p><p>Returns a new Pattern, which only returns haps that meet the given test.</p></p><ul><li>hap_test : function  - a function which returns false for haps to be removed from the pattern</li></ul></section><section><h3 id="doc-80">filterValues</h3><p><p>As with <code>filterHaps</code>, but the function is applied to values
inside haps.</p></p><ul><li>value_test : function </li></ul></section><section><h3 id="doc-81">firstCycle</h3><p><p>Queries the pattern for the first cycle, returning Haps. Mainly of use when
debugging a pattern.</p></p><ul><li>with_context : Boolean  - set to true, otherwise the context field
will be stripped from the resulting haps.</li></ul></section><section><h3 id="doc-82">firstCycleValues</h3><p><p>Accessor for a list of values returned by querying the first cycle.</p></p><ul></ul></section><section><h3 id="doc-83">firstOf</h3><p><p>Applies the given function every n cycles, starting from the first cycle.</p></p><ul><li>n : number  - how many cycles</li><li>func : function  - function to apply</li></ul><pre>note("c3 d3 e3 g3").firstOf(4, x=&gt;x.rev())</pre></section><section><h3 id="doc-84">fit</h3><p><p>Makes the sample fit its event duration. Good for rhythmical loops like drum breaks.
Similar to <code>loopAt</code>.</p></p><ul></ul><pre>samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })
s("rhodes/2").fit()</pre></section><section><h3 id="doc-85">floor</h3><p><p>Assumes a numerical pattern. Returns a new pattern with all values set to
their mathematical floor. E.g. <code>3.7</code> replaced with to <code>3</code>, and <code>-4.2</code>
replaced with <code>-5</code>.</p></p><ul></ul><pre>note("42 42.1 42.5 43".floor())</pre></section><section><h3 id="doc-86">fm</h3><p>Synonyms: <code>fmi</code></p><p><p>Sets the Frequency Modulation of the synth.
Controls the modulation index, which defines the brightness of the sound.</p></p><ul><li>brightness : number | Pattern  - modulation index</li></ul><pre>note("c e g b g e")
.fm("&lt;0 1 2 8 32&gt;")
.scope()</pre></section><section><h3 id="doc-87">fmap</h3><p><p>see <code>withValue</code></p></p><ul></ul></section><section><h3 id="doc-88">fmattack</h3><p><p>Attack time for the FM envelope: time it takes to reach maximum modulation</p></p><ul><li>time : number | Pattern  - attack time</li></ul><pre>note("c e g b g e")
.fm(4)
.fmattack("&lt;0 .05 .1 .2&gt;")
.scope()</pre></section><section><h3 id="doc-89">fmdecay</h3><p><p>Decay time for the FM envelope: seconds until the sustain level is reached after the attack phase.</p></p><ul><li>time : number | Pattern  - decay time</li></ul><pre>note("c e g b g e")
.fm(4)
.fmdecay("&lt;.01 .05 .1 .2&gt;")
.fmsustain(.4)
.scope()</pre></section><section><h3 id="doc-90">fmenv</h3><p><p>Ramp type of fm envelope. Exp might be a bit broken..</p></p><ul><li>type : number | Pattern  - lin | exp</li></ul><pre>note("c e g b g e")
.fm(4)
.fmdecay(.2)
.fmsustain(0)
.fmenv("&lt;exp lin&gt;")
.scope()</pre></section><section><h3 id="doc-91">fmh</h3><p><p>Sets the Frequency Modulation Harmonicity Ratio.
Controls the timbre of the sound.
Whole numbers and simple ratios sound more natural,
while decimal numbers and complex ratios sound metallic.</p></p><ul><li>harmonicity : number | Pattern </li></ul><pre>note("c e g b g e")
.fm(4)
.fmh("&lt;1 2 1.5 1.61&gt;")
.scope()</pre></section><section><h3 id="doc-92">fmsustain</h3><p><p>Sustain level for the FM envelope: how much modulation is applied after the decay phase</p></p><ul><li>level : number | Pattern  - sustain level</li></ul><pre>note("c e g b g e")
.fm(4)
.fmdecay(.1)
.fmsustain("&lt;1 .75 .5 0&gt;")
.scope()</pre></section><section><h3 id="doc-93">focus</h3><p><p>Similar to <code>compress</code>, but doesn't leave gaps, and the 'focus' can be bigger than a cycle</p></p><ul></ul><pre>s("bd hh sd hh").focus(1/4, 3/4)</pre></section><section><h3 id="doc-94">freq</h3><p><p>Set frequency of sound.</p></p><ul><li>frequency : number | Pattern  - in Hz. the audible range is between 20 and 20000 Hz</li></ul><pre>freq("220 110 440 110").s("superzow").osc()</pre><pre>freq("110".mul.out(".5 1.5 .6 [2 3]")).s("superzow").osc()</pre></section><section><h3 id="doc-95">fromBipolar</h3><p><p>Assumes a numerical pattern, containing bipolar values in the range -1 .. 1
Returns a new pattern with values scaled to the unipolar range 0 .. 1</p></p><ul></ul></section><section><h3 id="doc-96">fscope</h3><p><p>Renders an oscilloscope for the frequency domain of the audio signal.</p></p><ul><li>color : string  - line color as hex or color name. defaults to white.</li><li>scale : number  - scales the y-axis. Defaults to 0.25</li><li>pos : number  - y-position relative to screen height. 0 = top, 1 = bottom of screen</li><li>lean : number  - y-axis alignment where 0 = top and 1 = bottom</li><li>min : number  - min value</li><li>max : number  - max value</li></ul><pre>s("sawtooth").fscope()</pre></section><section><h3 id="doc-97">ftype</h3><p><p>Sets the filter type. The 24db filter is more aggressive. More types might be added in the future.</p></p><ul><li>type : number | Pattern  - 12db (default) or 24db</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.lpf(500)
.bpenv(4)
.ftype("12db 24db")</pre></section><section><h3 id="doc-98">gain</h3><p><p>Controls the gain by an exponential amount.</p></p><ul><li>amount : number | Pattern  - gain.</li></ul><pre>s("hh*8").gain(".4!2 1 .4!2 1 .4 1").fast(2)</pre></section><section><h3 id="doc-99">generateGraph</h3><p><p>Creates a canvas element showing a graph of the given data.</p></p><ul><li>data : Float32Array  - An array of numbers, or a Float32Array.</li><li>width : number  - Width in pixels of the canvas.</li><li>height : number  - Height in pixels of the canvas.</li><li>min : number  - Minimum value of data for the graph (lower edge).</li><li>max : number  - Maximum value of data in the graph (upper edge).</li></ul></section><section><h3 id="doc-100">generateReverb</h3><p><p>Generates a reverb impulse response.</p></p><ul><li>params : Object  - TODO: Document the properties.</li><li>callback : function  - Function to call when
the impulse response has been generated. The impulse response
is passed to this function as its parameter. May be called
immediately within the current execution context, or later.</li></ul></section><section><h3 id="doc-101">hpattack</h3><p>Synonyms: <code>hpa</code></p><p><p>Sets the attack duration for the highpass filter envelope.</p></p><ul><li>attack : number | Pattern  - time of the highpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.hpf(500)
.hpa("&lt;.5 .25 .1 .01&gt;/4")
.hpenv(4)</pre></section><section><h3 id="doc-102">hpdecay</h3><p>Synonyms: <code>hpd</code></p><p><p>Sets the decay duration for the highpass filter envelope.</p></p><ul><li>decay : number | Pattern  - time of the highpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.hpf(500)
.hpd("&lt;.5 .25 .1 0&gt;/4")
.hps(0.2)
.hpenv(4)</pre></section><section><h3 id="doc-103">hpenv</h3><p>Synonyms: <code>hpe</code></p><p><p>Sets the highpass filter envelope modulation depth.</p></p><ul><li>modulation : number | Pattern  - depth of the highpass filter envelope between 0 and n</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.hpf(500)
.hpa(.5)
.hpenv("&lt;4 2 1 0 -1 -2 -4&gt;/4")</pre></section><section><h3 id="doc-104">hpf</h3><p>Synonyms: <code>hp, hcutoff</code></p><p><p>Applies the cutoff frequency of the <strong>h</strong>igh-<strong>p</strong>ass <strong>f</strong>ilter.</p>
<p>When using mininotation, you can also optionally add the 'hpq' parameter, separated by ':'.</p></p><ul><li>frequency : number | Pattern  - audible between 0 and 20000</li></ul><pre>s("bd sd [~ bd] sd,hh*8").hpf("&lt;4000 2000 1000 500 200 100&gt;")</pre><pre>s("bd sd [~ bd] sd,hh*8").hpf("&lt;2000 2000:25&gt;")</pre></section><section><h3 id="doc-105">hpq</h3><p>Synonyms: <code>hresonance</code></p><p><p>Controls the <strong>h</strong>igh-<strong>p</strong>ass <strong>q</strong>-value.</p></p><ul><li>q : number | Pattern  - resonance factor between 0 and 50</li></ul><pre>s("bd sd [~ bd] sd,hh*8").hpf(2000).hpq("&lt;0 10 20 30&gt;")</pre></section><section><h3 id="doc-106">hprelease</h3><p>Synonyms: <code>hpr</code></p><p><p>Sets the release time for the highpass filter envelope.</p></p><ul><li>release : number | Pattern  - time of the highpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.clip(.5)
.hpf(500)
.hpenv(4)
.hpr("&lt;.5 .25 .1 0&gt;/4")
.release(.5)</pre></section><section><h3 id="doc-107">hpsustain</h3><p>Synonyms: <code>hps</code></p><p><p>Sets the sustain amplitude for the highpass filter envelope.</p></p><ul><li>sustain : number | Pattern  - amplitude of the highpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.hpf(500)
.hpd(.5)
.hps("&lt;0 .25 .5 1&gt;/4")
.hpenv(4)</pre></section><section><h3 id="doc-108">hurry</h3><p><p>Both speeds up the pattern (like 'fast') and the sample playback (like 'speed').</p></p><ul></ul><pre>s("bd sd:2").hurry("&lt;1 2 4 3&gt;").slow(1.5)</pre></section><section><h3 id="doc-109">hush</h3><p><p>Silences a pattern.</p></p><ul></ul><pre>stack(
  s("bd").hush(),
  s("hh*3")
)</pre></section><section><h3 id="doc-110">inhabit</h3><p>Synonyms: <code>pickSqueeze</code></p><p><p>/** * Picks patterns (or plain values) either from a list (by index) or a lookup table (by name).
Similar to <code>pick</code>, but cycles are squeezed into the target ('inhabited') pattern.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul><pre>"&lt;a b [a,b]&gt;".inhabit({a: s("bd(3,8)"),
                          b: s("cp sd")
                         })</pre><pre>s("a@2 [a b] a".inhabit({a: "bd(3,8)", b: "sd sd"})).slow(4)</pre></section><section><h3 id="doc-111">inhabitmod</h3><p>Synonyms: <code>pickmodSqueeze</code></p><p><p>The same as <code>inhabit</code>, but if you pick a number greater than the size of the list,
it wraps around, rather than sticking at the maximum value.
For example, if you pick the fifth pattern of a list of three, you'll get the
second one.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-112">inside</h3><p><p>Carries out an operation 'inside' a cycle.</p></p><ul></ul><pre>"0 1 2 3 4 3 2 1".inside(4, rev).scale('C major').note()
// "0 1 2 3 4 3 2 1".slow(4).rev().fast(4).scale('C major').note()</pre></section><section><h3 id="doc-113">invert</h3><p>Synonyms: <code>inv</code></p><p><p>Swaps 1s and 0s in a binary pattern.</p></p><ul></ul><pre>s("bd").struct("1 0 0 1 0 0 1 0".lastOf(4, invert))</pre></section><section><h3 id="doc-114">irand</h3><p><p>A continuous pattern of random integers, between 0 and n-1.</p></p><ul><li>n : number  - max value (exclusive)</li></ul><pre>// randomly select scale notes from 0 - 7 (= C to C)
n(irand(8)).struct("x x*2 x x*3").scale("C:minor")</pre></section><section><h3 id="doc-115">iresponse</h3><p>Synonyms: <code>ir</code></p><p><p>Sets the sample to use as an impulse response for the reverb.</p></p><ul><li>sample : string | Pattern  - to use as an impulse response</li></ul><pre>s("bd sd [~ bd] sd").room(.8).ir("&lt;shaker_large:0 shaker_large:2&gt;")</pre></section><section><h3 id="doc-116">iter</h3><p><p>Divides
 a pattern into a given number of subdivisions, plays the subdivisions 
in order, but increments the starting subdivision each cycle. The 
pattern wraps to the first subdivision after the last subdivision is 
played.</p></p><ul></ul><pre>note("0 1 2 3".scale('A minor')).iter(4)</pre></section><section><h3 id="doc-117">iterBack</h3><p>Synonyms: <code>iterback</code></p><p><p>Like <code>iter</code>, but plays the subdivisions in reverse order. Known as iter' in tidalcycles</p></p><ul></ul><pre>note("0 1 2 3".scale('A minor')).iterBack(4)</pre></section><section><h3 id="doc-118">jux</h3><p><p>The jux function creates strange stereo effects, by applying a function to a pattern, but only in the right-hand channel.</p></p><ul></ul><pre>s("bd lt [~ ht] mt cp ~ bd hh").jux(rev)</pre><pre>s("bd lt [~ ht] mt cp ~ bd hh").jux(press)</pre><pre>s("bd lt [~ ht] mt cp ~ bd hh").jux(iter(4))</pre></section><section><h3 id="doc-119">juxBy</h3><p>Synonyms: <code>juxby</code></p><p><p>Jux with adjustable stereo width. 0 = mono, 1 = full stereo.</p></p><ul></ul><pre>s("bd lt [~ ht] mt cp ~ bd hh").juxBy("&lt;0 .5 1&gt;/2", rev)</pre></section><section><h3 id="doc-120">label</h3><p><p>Sets the displayed text for an event on the pianoroll</p></p><ul><li>label : string  - text to display</li></ul></section><section><h3 id="doc-121">lastOf</h3><p><p>Applies the given function every n cycles, starting from the last cycle.</p></p><ul><li>n : number  - how many cycles</li><li>func : function  - function to apply</li></ul><pre>note("c3 d3 e3 g3").lastOf(4, x=&gt;x.rev())</pre></section><section><h3 id="doc-122">late</h3><p><p>Nudge a pattern to start later in time. Equivalent of Tidal's ~&gt; operator</p></p><ul><li>cycles : number | Pattern  - number of cycles to nudge right</li></ul><pre>"bd ~".stack("hh ~".late(.1)).s()</pre></section><section><h3 id="doc-123">layer</h3><p>Synonyms: <code>apply</code></p><p><p>Layers the result of the given function(s). Like <code>superimpose</code>, but without the original pattern:</p></p><ul></ul><pre>"&lt;0 2 4 6 ~ 4 ~ 2 0!3 ~!5&gt;*8"
  .layer(x=&gt;x.add("0,2"))
  .scale('C minor').note()</pre></section><section><h3 id="doc-124">leslie</h3><p><p>Emulation of a Leslie speaker: speakers rotating in a wooden amplified cabinet.</p></p><ul><li>wet : number | Pattern  - between 0 and 1</li></ul><pre>n("0,4,7").s("supersquare").leslie("&lt;0 .4 .6 1&gt;").osc()</pre></section><section><h3 id="doc-125">linger</h3><p><p>Selects the given fraction of the pattern and repeats that part to fill the remainder of the cycle.</p></p><ul><li>fraction : number  - fraction to select</li></ul><pre>s("lt ht mt cp, [hh oh]*2").linger("&lt;1 .5 .25 .125&gt;")</pre></section><section><h3 id="doc-126">loop</h3><p><p>Loops the sample.
Note that the tempo of the loop is not synced with the cycle tempo.
To change the loop region, use loopBegin / loopEnd.</p></p><ul><li>on : number | Pattern  - If 1, the sample is looped</li></ul><pre>s("casio").loop(1)</pre></section><section><h3 id="doc-127">loopAt</h3><p><p>Makes the sample fit the given number of cycles by changing the speed.</p></p><ul></ul><pre>samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })
s("rhodes").loopAt(2)</pre></section><section><h3 id="doc-128">loopAtCps</h3><p><p>Makes the sample fit the given number of cycles and cps value, by
changing the speed. Please note that at some point cps will be
given by a global clock and this function will be
deprecated/removed.</p></p><ul></ul><pre>samples({ rhodes: 'https://cdn.freesound.org/previews/132/132051_316502-lq.mp3' })
s("rhodes").loopAtCps(4,1.5).cps(1.5)</pre></section><section><h3 id="doc-129">loopBegin</h3><p>Synonyms: <code>loopb</code></p><p><p>Begin to loop at a specific point in the sample (inbetween <code>begin</code> and <code>end</code>).
Note that the loop point must be inbetween <code>begin</code> and <code>end</code>, and before <code>loopEnd</code>!
Note: Samples starting with wt_ will automatically loop! (wt = wavetable)</p></p><ul><li>time : number | Pattern  - between 0 and 1, where 1 is the length of the sample</li></ul><pre>s("space").loop(1)
.loopBegin("&lt;0 .125 .25&gt;").scope()</pre></section><section><h3 id="doc-130">loopEnd</h3><p>Synonyms: <code>loope</code></p><p><p>End the looping section at a specific point in the sample (inbetween <code>begin</code> and <code>end</code>).
Note that the loop point must be inbetween <code>begin</code> and <code>end</code>, and after <code>loopBegin</code>!</p></p><ul><li>time : number | Pattern  - between 0 and 1, where 1 is the length of the sample</li></ul><pre>s("space").loop(1)
.loopEnd("&lt;1 .75 .5 .25&gt;").scope()</pre></section><section><h3 id="doc-131">lpattack</h3><p>Synonyms: <code>lpa</code></p><p><p>Sets the attack duration for the lowpass filter envelope.</p></p><ul><li>attack : number | Pattern  - time of the filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.lpf(500)
.lpa("&lt;.5 .25 .1 .01&gt;/4")
.lpenv(4)</pre></section><section><h3 id="doc-132">lpdecay</h3><p>Synonyms: <code>lpd</code></p><p><p>Sets the decay duration for the lowpass filter envelope.</p></p><ul><li>decay : number | Pattern  - time of the filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.lpf(500)
.lpd("&lt;.5 .25 .1 0&gt;/4")
.lps(0.2)
.lpenv(4)</pre></section><section><h3 id="doc-133">lpenv</h3><p>Synonyms: <code>lpe</code></p><p><p>Sets the lowpass filter envelope modulation depth.</p></p><ul><li>modulation : number | Pattern  - depth of the lowpass filter envelope between 0 and n</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.lpf(500)
.lpa(.5)
.lpenv("&lt;4 2 1 0 -1 -2 -4&gt;/4")</pre></section><section><h3 id="doc-134">lpf</h3><p>Synonyms: <code>cutoff, ctf, lp</code></p><p><p>Applies the cutoff frequency of the <strong>l</strong>ow-<strong>p</strong>ass <strong>f</strong>ilter.</p>
<p>When using mininotation, you can also optionally add the 'lpq' parameter, separated by ':'.</p></p><ul><li>frequency : number | Pattern  - audible between 0 and 20000</li></ul><pre>s("bd sd [~ bd] sd,hh*6").lpf("&lt;4000 2000 1000 500 200 100&gt;")</pre><pre>s("bd*16").lpf("1000:0 1000:10 1000:20 1000:30")</pre></section><section><h3 id="doc-135">lpq</h3><p>Synonyms: <code>resonance</code></p><p><p>Controls the <strong>l</strong>ow-<strong>p</strong>ass <strong>q</strong>-value.</p></p><ul><li>q : number | Pattern  - resonance factor between 0 and 50</li></ul><pre>s("bd sd [~ bd] sd,hh*8").lpf(2000).lpq("&lt;0 10 20 30&gt;")</pre></section><section><h3 id="doc-136">lprelease</h3><p>Synonyms: <code>lpr</code></p><p><p>Sets the release time for the lowpass filter envelope.</p></p><ul><li>release : number | Pattern  - time of the filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.clip(.5)
.lpf(500)
.lpenv(4)
.lpr("&lt;.5 .25 .1 0&gt;/4")
.release(.5)</pre></section><section><h3 id="doc-137">lpsustain</h3><p>Synonyms: <code>lps</code></p><p><p>Sets the sustain amplitude for the lowpass filter envelope.</p></p><ul><li>sustain : number | Pattern  - amplitude of the lowpass filter envelope</li></ul><pre>note("c2 e2 f2 g2")
.sound('sawtooth')
.lpf(500)
.lpd(.5)
.lps("&lt;0 .25 .5 1&gt;/4")
.lpenv(4)</pre></section><section><h3 id="doc-138">lrate</h3><p><p>Rate of modulation / rotation for leslie effect</p></p><ul><li>rate : number | Pattern  - 6.7 for fast, 0.7 for slow</li></ul><pre>n("0,4,7").s("supersquare").leslie(1).lrate("&lt;1 2 4 8&gt;").osc()</pre></section><section><h3 id="doc-139">lsize</h3><p><p>Physical
 size of the cabinet in meters. Be careful, it might be slightly larger 
than your computer. Affects the Doppler amount (pitch warble)</p></p><ul><li>meters : number | Pattern  - somewhere between 0 and 1</li></ul><pre>n("0,4,7").s("supersquare").leslie(1).lrate(2).lsize("&lt;.1 .5 1&gt;").osc()</pre></section><section><h3 id="doc-140">mask</h3><p><p>Returns silence when mask is 0 or "~"</p></p><ul></ul><pre>note("c [eb,g] d [eb,g]").mask("&lt;1 [0 1]&gt;")</pre></section><section><h3 id="doc-141">mul</h3><p><p>Multiplies each number by the given factor.</p></p><ul></ul><pre>"&lt;1 1.5 [1.66, &lt;2 2.33&gt;]&gt;*4".mul(150).freq()</pre></section><section><h3 id="doc-142">n</h3><p><p>Selects the given index from the sample map.
Numbers too high will wrap around.
<code>n</code> can also be used to play midi numbers, but it is recommended to use <code>note</code> instead.</p></p><ul><li>value : number | Pattern  - sample index starting from 0</li></ul><pre>s("bd sd [~ bd] sd,hh*6").n("&lt;0 1&gt;")</pre></section><section><h3 id="doc-143">never</h3><p><p>Shorthand for <code>.sometimesBy(0, fn)</code> (never calls fn)</p></p><ul></ul><pre>s("hh*8").never(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-144">noise</h3><p><p>Adds pink noise to the mix</p></p><ul><li>wet : number | Pattern  - wet amount</li></ul><pre>sound("&lt;white pink brown&gt;/2")</pre></section><section><h3 id="doc-145">note</h3><p><p>Plays the given note name or midi number. A note name consists of</p>
<ul>
<li>a letter (a-g or A-G)</li>
<li>optional accidentals (b or #)</li>
<li>optional octave number (0-9). Defaults to 3</li>
</ul>
<p>Examples of valid note names: <code>c</code>, <code>bb</code>, <code>Bb</code>, <code>f#</code>, <code>c3</code>, <code>A4</code>, <code>Eb2</code>, <code>c#5</code></p>
<p>You can also use midi numbers instead of note names, where 69 is mapped to A4 440Hz in 12EDO.</p></p><ul></ul><pre>note("c a f e")</pre><pre>note("c4 a4 f4 e4")</pre><pre>note("60 69 65 64")</pre></section><section><h3 id="doc-146">octave</h3><p><p>Sets the default octave of a synth.</p></p><ul><li>octave : number | Pattern  - octave number</li></ul><pre>n("0,4,7").s('supersquare').octave("&lt;3 4 5 6&gt;").osc()</pre></section><section><h3 id="doc-147">off</h3><p><p>Superimposes the function result on top of the original pattern, delayed by the given time.</p></p><ul><li>time : Pattern | number  - offset time</li><li>func : function  - function to apply</li></ul><pre>"c3 eb3 g3".off(1/8, x=&gt;x.add(7)).note()</pre></section><section><h3 id="doc-148">often</h3><p><p>Shorthand for <code>.sometimesBy(0.75, fn)</code></p></p><ul></ul><pre>s("hh*8").often(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-149">onsetsOnly</h3><p><p>Returns a new pattern, with all haps without onsets filtered out. A hap
with an onset is one with a <code>whole</code> timespan that begins at the same time
as its <code>part</code> timespan.</p></p><ul></ul></section><section><h3 id="doc-150">orbit</h3><p><p>An <code>orbit</code> is a global parameter context for patterns. Patterns with the same orbit will share the same global effects.</p></p><ul><li>number : number | Pattern </li></ul><pre>stack(
  s("hh*6").delay(.5).delaytime(.25).orbit(1),
  s("~ sd ~ sd").delay(.5).delaytime(.125).orbit(2)
)</pre></section><section><h3 id="doc-151">osc</h3><p><p>Sends each hap as an OSC message, which can be picked up by SuperCollider or any other OSC-enabled software.
For more info, read <a href="https://strudel.cc/learn/input-output/">MIDI &amp; OSC in the docs</a></p></p><ul></ul></section><section><h3 id="doc-152">outside</h3><p><p>Carries out an operation 'outside' a cycle.</p></p><ul></ul><pre>"&lt;[0 1] 2 [3 4] 5&gt;".outside(4, rev).scale('C major').note()
// "&lt;[0 1] 2 [3 4] 5&gt;".fast(4).rev().slow(4).scale('C major').note()</pre></section><section><h3 id="doc-153">palindrome</h3><p><p>Applies <code>rev</code> to a pattern every other cycle, so that the pattern alternates between forwards and backwards.</p></p><ul></ul><pre>note("c d e g").palindrome()</pre></section><section><h3 id="doc-154">pan</h3><p><p>Sets position in stereo.</p></p><ul><li>pan : number | Pattern  - between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)</li></ul><pre>s("[bd hh]*2").pan("&lt;.5 1 .5 0&gt;")</pre><pre>s("bd rim sd rim bd ~ cp rim").pan(sine.slow(2))</pre></section><section><h3 id="doc-155">panchor</h3><p><p>Sets the range anchor of the envelope:</p>
<ul>
<li>anchor 0: range = [note, note + penv]</li>
<li>anchor 1: range = [note - penv, note]
If you don't set an anchor, the value will default to the psustain value.</li>
</ul></p><ul><li>anchor : number | Pattern  - anchor offset</li></ul><pre>note("c c4").penv(12).panchor("&lt;0 .5 1 .5&gt;")</pre></section><section><h3 id="doc-156">pattack</h3><p>Synonyms: <code>patt</code></p><p><p>Attack time of pitch envelope.</p></p><ul><li>time : number | Pattern  - time in seconds</li></ul><pre>note("c eb g bb").pattack("0 .1 .25 .5").slow(2)</pre></section><section><h3 id="doc-157">Pattern</h3><p><p>Create a pattern. As an end user, you will most likely not create a Pattern directly.</p></p><ul><li>query : function  - The function that maps a State to an array of Hap.</li></ul></section><section><h3 id="doc-158">pcurve</h3><p><p>Curve of envelope. Defaults to linear. exponential is good for kicks</p></p><ul><li>type : number | Pattern  - 0 = linear, 1 = exponential</li></ul><pre>note("g1*4")
.s("sine").pdec(.5)
.penv(32)
.pcurve("&lt;0 1&gt;")</pre></section><section><h3 id="doc-159">pdecay</h3><p>Synonyms: <code>pdec</code></p><p><p>Decay time of pitch envelope.</p></p><ul><li>time : number | Pattern  - time in seconds</li></ul><pre>note("&lt;c eb g bb&gt;").pdecay("&lt;0 .1 .25 .5&gt;")</pre></section><section><h3 id="doc-160">penv</h3><p><p>Amount of pitch envelope. Negative values will flip the envelope.
If you don't set other pitch envelope controls, <code>pattack:.2</code> will be the default.</p></p><ul><li>semitones : number | Pattern  - change in semitones</li></ul><pre>note("c")
.penv("&lt;12 7 1 .5 0 -1 -7 -12&gt;")</pre></section><section><h3 id="doc-161">perlin</h3><p><p>Generates a continuous pattern of <a href="https://en.wikipedia.org/wiki/Perlin_noise">perlin noise</a>, in the range 0..1.</p></p><ul></ul><pre>// randomly change the cutoff
s("bd*4,hh*8").cutoff(perlin.range(500,8000))</pre></section><section><h3 id="doc-162">phaser</h3><p>Synonyms: <code>ph</code></p><p><p>Phaser audio effect that approximates popular guitar pedals.</p></p><ul><li>speed : number | Pattern  - speed of modulation</li></ul><pre>n(run(8)).scale("D:pentatonic").s("sawtooth").release(0.5)
.phaser("&lt;1 2 4 8&gt;")</pre></section><section><h3 id="doc-163">phasercenter</h3><p>Synonyms: <code>phc</code></p><p><p>The center frequency of the phaser in HZ. Defaults to 1000</p></p><ul><li>centerfrequency : number | Pattern  - in HZ</li></ul><pre>n(run(8)).scale("D:pentatonic").s("sawtooth").release(0.5)
.phaser(2).phasercenter("&lt;800 2000 4000&gt;")</pre></section><section><h3 id="doc-164">phaserdepth</h3><p>Synonyms: <code>phd</code></p><p><p>The amount the signal is affected by the phaser effect. Defaults to 0.75</p></p><ul><li>depth : number | Pattern  - number between 0 and 1</li></ul><pre>n(run(8)).scale("D:pentatonic").s("sawtooth").release(0.5)
.phaser(2).phaserdepth("&lt;0 .5 .75 1&gt;")</pre></section><section><h3 id="doc-165">phasersweep</h3><p>Synonyms: <code>phs</code></p><p><p>The frequency sweep range of the lfo for the phaser effect. Defaults to 2000</p></p><ul><li>phasersweep : number | Pattern  - most useful values are between 0 and 4000</li></ul><pre>n(run(8)).scale("D:pentatonic").s("sawtooth").release(0.5)
.phaser(2).phasersweep("&lt;800 2000 4000&gt;")</pre></section><section><h3 id="doc-166">pianoroll</h3><p><p>Displays a midi-style piano roll</p></p><ul><li>options : Object  - Object containing all the optional following parameters as key value pairs:</li><li>cycles : integer  - number of cycles to be displayed at the same time - defaults to 4</li><li>playhead : number  - location of the active notes on the time axis - 0 to 1, defaults to 0.5</li><li>vertical : boolean  - displays the roll vertically - 0 by default</li><li>labels : boolean  - displays labels on individual notes (see the label function) - 0 by default</li><li>flipTime : boolean  - reverse the direction of the roll - 0 by default</li><li>flipValues : boolean  - reverse the relative location of notes on the value axis - 0 by default</li><li>overscan : number  - lookup X cycles outside of the cycles window to display notes in advance - 1 by default</li><li>hideNegative : boolean  - hide notes with negative time (before starting playing the pattern) - 0 by default</li><li>smear : boolean  - notes leave a solid trace - 0 by default</li><li>fold : boolean  - notes takes the full value axis width - 0 by default</li><li>active : string  - hexadecimal or CSS color of the active notes - defaults to #FFCA28</li><li>inactive : string  - hexadecimal or CSS color of the inactive notes - defaults to #7491D2</li><li>background : string  - hexadecimal or CSS color of the background - defaults to transparent</li><li>playheadColor : string  - hexadecimal or CSS color of the line representing the play head - defaults to white</li><li>fill : boolean  - notes are filled with color (otherwise only the label is displayed) - 0 by default</li><li>fillActive : boolean  - active notes are filled with color - 0 by default</li><li>stroke : boolean  - notes are shown with colored borders - 0 by default</li><li>strokeActive : boolean  - active notes are shown with colored borders - 0 by default</li><li>hideInactive : boolean  - only active notes are shown - 0 by default</li><li>colorizeInactive : boolean  - use note color for inactive notes - 1 by default</li><li>fontFamily : string  - define the font used by notes labels - defaults to 'monospace'</li><li>minMidi : integer  - minimum note value to display on the value axis - defaults to 10</li><li>maxMidi : integer  - maximum note value to display on the value axis - defaults to 90</li><li>autorange : boolean  - automatically calculate the minMidi and maxMidi parameters - 0 by default</li></ul><pre>note("C2 A2 G2").euclid(5,8).s('piano').clip(1).color('salmon').pianoroll({vertical:1, labels:1})</pre></section><section><h3 id="doc-167">pick</h3><p><p>Picks patterns (or plain values) either from a list (by index) or a lookup table (by name).
Similar to <code>inhabit</code>, but maintains the structure of the original patterns.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul><pre>note("&lt;0 1 2!2 3&gt;".pick(["g a", "e f", "f g f g" , "g c d"]))</pre><pre>sound("&lt;0 1 [2,0]&gt;".pick(["bd sd", "cp cp", "hh hh"]))</pre><pre>sound("&lt;0!2 [0,1] 1&gt;".pick(["bd(3,8)", "sd sd"]))</pre><pre>s("&lt;a!2 [a,b] b&gt;".pick({a: "bd(3,8)", b: "sd sd"}))</pre></section><section><h3 id="doc-168">pickF</h3><p><p>pickF lets you use a pattern of numbers to pick which function to apply to another pattern.</p></p><ul><li>pat : Pattern </li><li>lookup : Pattern  - a pattern of indices</li><li>funcs : Array.&lt;function()&gt;  - the array of functions from which to pull</li></ul><pre>s("bd [rim hh]").pickF("&lt;0 1 2&gt;", [rev,jux(rev),fast(2)])</pre><pre>note("&lt;c2 d2&gt;(3,8)").s("square")
    .pickF("&lt;0 2&gt; 1", [jux(rev),fast(2),x=&gt;x.lpf(800)])</pre></section><section><h3 id="doc-169">pickmod</h3><p><p>The same as <code>pick</code>, but if you pick a number greater than the size of the list,
it wraps around, rather than sticking at the maximum value.
For example, if you pick the fifth pattern of a list of three, you'll get the
second one.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-170">pickmodF</h3><p><p>The same as <code>pickF</code>, but if you pick a number greater than the size of the functions list,
it wraps around, rather than sticking at the maximum value.</p></p><ul><li>pat : Pattern </li><li>lookup : Pattern  - a pattern of indices</li><li>funcs : Array.&lt;function()&gt;  - the array of functions from which to pull</li></ul></section><section><h3 id="doc-171">pickmodOut</h3><p><p>The same as <code>pickOut</code>, but if you pick a number greater than the size of the list,
it wraps around, rather than sticking at the maximum value.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-172">pickmodReset</h3><p><p>The same as <code>pickReset</code>, but if you pick a number greater than the size of the list,
it wraps around, rather than sticking at the maximum value.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-173">pickmodRestart</h3><p><p>The same as <code>pickRestart</code>, but if you pick a number greater than the size of the list,
it wraps around, rather than sticking at the maximum value.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-174">pickOut</h3><p><p>Similar to <code>pick</code>, but it applies an outerJoin instead of an innerJoin.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-175">pickReset</h3><p><p>Similar to <code>pick</code>, but the choosen pattern is reset when its index is triggered.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-176">pickRestart</h3><p><p>Similar to <code>pick</code>, but the choosen pattern is restarted when its index is triggered.</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul></section><section><h3 id="doc-177">ply</h3><p><p>The ply function repeats each event the given number of times.</p></p><ul></ul><pre>s("bd ~ sd cp").ply("&lt;1 2 3&gt;")</pre></section><section><h3 id="doc-178">polymeter</h3><p>Synonyms: <code>pm</code></p><p><p>Combines
 the given lists of patterns with the same pulse. This will create so 
called polymeters when different sized sequences are used.</p></p><ul></ul><pre>polymeter(["c", "eb", "g"], ["c2", "g2"]).note()
// "{c eb g, c2 g2}".note()</pre></section><section><h3 id="doc-179">polymeterSteps</h3><p><p>Aligns one or more given sequences to the given number of steps per cycle.</p></p><ul><li>steps : number  - how many items are placed in one cycle</li><li>sequences : Array.&lt;any&gt;  - one or more arrays of Patterns / values</li></ul><pre>polymeterSteps(4, ["c", "d", "e"])
.note().stack(s("bd"))
// note("{c d e}%4").stack(s("bd"))</pre></section><section><h3 id="doc-180">postgain</h3><p><p>Gain applied after all effects have been processed.</p></p><ul></ul><pre>s("bd sd [~ bd] sd,hh*8")
.compressor("-20:20:10:.002:.02").postgain(1.5)</pre></section><section><h3 id="doc-181">prelease</h3><p>Synonyms: <code>prel</code></p><p><p>Release time of pitch envelope</p></p><ul><li>time : number | Pattern  - time in seconds</li></ul><pre>note("&lt;c eb g bb&gt; ~")
.release(.5) // to hear the pitch release
.prelease("&lt;0 .1 .25 .5&gt;")</pre></section><section><h3 id="doc-182">press</h3><p><p>Syncopates a rhythm, by shifting each event halfway into its timespan.</p></p><ul></ul><pre>stack(s("hh*4"),
      s("bd mt sd ht").every(4, press)
     ).slow(2)</pre></section><section><h3 id="doc-183">pressBy</h3><p><p>Like press, but allows you to specify the amount by which each
event is shifted. pressBy(0.5) is the same as press, while
pressBy(1/3) shifts each event by a third of its timespan.</p></p><ul></ul><pre>stack(s("hh*4"),
      s("bd mt sd ht").pressBy("&lt;0 0.5 0.25&gt;")
     ).slow(2)</pre></section><section><h3 id="doc-184">pure</h3><p><p>A discrete value that repeats once per cycle.</p></p><ul></ul><pre>pure('e4') // "e4"</pre></section><section><h3 id="doc-185">queryArc</h3><p><p>Query haps inside the given time span.</p></p><ul><li>begin : Fraction | number  - from time</li><li>end : Fraction | number  - to time</li></ul><pre>const pattern = sequence('a', ['b', 'c'])
const haps = pattern.queryArc(0, 1)
console.log(haps)
silence</pre></section><section><h3 id="doc-186">rand</h3><p><p>A continuous pattern of random numbers, between 0 and 1.</p></p><ul></ul><pre>// randomly change the cutoff
s("bd*4,hh*8").cutoff(rand.range(500,8000))</pre></section><section><h3 id="doc-187">rand2</h3><p><p>A continuous pattern of random numbers, between -1 and 1</p></p><ul></ul></section><section><h3 id="doc-188">range</h3><p><p>Assumes a numerical pattern, containing unipolar values in the range 0 .. 1.
Returns a new pattern with values scaled to the given min/max range.
Most useful in combination with continuous patterns.</p></p><ul></ul><pre>s("[bd sd]*2,hh*8")
.cutoff(sine.range(500,4000))</pre></section><section><h3 id="doc-189">range2</h3><p><p>Assumes a numerical pattern, containing bipolar values in the range -1 .. 1
Returns a new pattern with values scaled to the given min/max range.</p></p><ul></ul><pre>s("[bd sd]*2,hh*8")
.cutoff(sine2.range2(500,4000))</pre></section><section><h3 id="doc-190">rangex</h3><p><p>Assumes a numerical pattern, containing unipolar values in the range 0 .. 1
Returns a new pattern with values scaled to the given min/max range,
following an exponential curve.</p></p><ul></ul><pre>s("[bd sd]*2,hh*8")
.cutoff(sine.rangex(500,4000))</pre></section><section><h3 id="doc-191">rarely</h3><p><p>Shorthand for <code>.sometimesBy(0.25, fn)</code></p></p><ul></ul><pre>s("hh*8").rarely(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-192">ratio</h3><p><p>Allows dividing numbers via list notation using ":".
Returns a new pattern with just numbers.</p></p><ul></ul><pre>ratio("1, 5:4, 3:2").mul(110)
.freq().s("piano")</pre></section><section><h3 id="doc-193">ref</h3><p><p>exposes a custom value at query time. basically allows mutating state without evaluation</p></p><ul></ul></section><section><h3 id="doc-194">register</h3><p><p>Registers a new pattern method. The method is added to the Pattern class + the standalone function is returned from register.</p></p><ul><li>name : string  - name of the function</li><li>func : function  - function with 1 or more params, where last is the current pattern</li></ul></section><section><h3 id="doc-195">release</h3><p>Synonyms: <code>rel</code></p><p><p>Amplitude envelope release time: The time it takes after the offset to go from sustain level to zero.</p></p><ul><li>time : number | Pattern  - release time in seconds</li></ul><pre>note("c3 e3 g3 c4").release("&lt;0 .1 .4 .6 1&gt;/2")</pre></section><section><h3 id="doc-196">removeUndefineds</h3><p><p>Returns a new pattern, with haps containing undefined values removed from
query results.</p></p><ul></ul></section><section><h3 id="doc-197">repeatCycles</h3><p><p>Repeats each cycle the given number of times.</p></p><ul></ul><pre>note(irand(12).add(34)).segment(4).repeatCycles(2).s("gm_acoustic_guitar_nylon")</pre></section><section><h3 id="doc-198">reset</h3><p><p>Resets the pattern to the start of the cycle for each onset of the reset pattern.</p></p><ul></ul><pre>s("[&lt;bd lt&gt; sd]*2, hh*8").reset("&lt;x@3 x(5,8)&gt;")</pre></section><section><h3 id="doc-199">restart</h3><p><p>Restarts the pattern for each onset of the restart pattern.
While reset will only reset the current cycle, restart will start from cycle 0.</p></p><ul></ul><pre>s("[&lt;bd lt&gt; sd]*2, hh*8").restart("&lt;x@3 x(5,8)&gt;")</pre></section><section><h3 id="doc-200">rev</h3><p><p>Reverse all haps in a pattern</p></p><ul></ul><pre>note("c d e g").rev()</pre></section><section><h3 id="doc-201">ribbon</h3><p><p>Loops the pattern inside at <code>offset</code> for <code>cycles</code>.</p></p><ul><li>offset : number  - start point of loop in cycles</li><li>cycles : number  - loop length in cycles</li></ul><pre>note("&lt;c d e f&gt;").ribbon(1, 2).fast(2)</pre><pre>// Looping a portion of randomness
note(irand(8).segment(4).scale('C3 minor')).ribbon(1337, 2)</pre></section><section><h3 id="doc-202">room</h3><p><p>Sets the level of reverb.</p>
<p>When using mininotation, you can also optionally add the 'size' parameter, separated by ':'.</p></p><ul><li>level : number | Pattern  - between 0 and 1</li></ul><pre>s("bd sd [~ bd] sd").room("&lt;0 .2 .4 .6 .8 1&gt;")</pre><pre>s("bd sd [~ bd] sd").room("&lt;0.9:1 0.9:4&gt;")</pre></section><section><h3 id="doc-203">roomdim</h3><p>Synonyms: <code>rdim</code></p><p><p>Reverb lowpass frequency at -60dB (in hertz).
When this property is changed, the reverb will be recaculated, so only change this sparsely..</p></p><ul><li>frequency : number  - between 0 and 20000hz</li></ul><pre>s("bd sd [~ bd] sd").room(0.5).rlp(10000).rdim(8000)</pre><pre>s("bd sd [~ bd] sd").room(0.5).rlp(5000).rdim(400)</pre></section><section><h3 id="doc-204">roomfade</h3><p>Synonyms: <code>rfade</code></p><p><p>Reverb fade time (in seconds).
When this property is changed, the reverb will be recaculated, so only change this sparsely..</p></p><ul><li>seconds : number  - for the reverb to fade</li></ul><pre>s("bd sd [~ bd] sd").room(0.5).rlp(10000).rfade(0.5)</pre><pre>s("bd sd [~ bd] sd").room(0.5).rlp(5000).rfade(4)</pre></section><section><h3 id="doc-205">roomlp</h3><p>Synonyms: <code>rlp</code></p><p><p>Reverb lowpass starting frequency (in hertz).
When this property is changed, the reverb will be recaculated, so only change this sparsely..</p></p><ul><li>frequency : number  - between 0 and 20000hz</li></ul><pre>s("bd sd [~ bd] sd").room(0.5).rlp(10000)</pre><pre>s("bd sd [~ bd] sd").room(0.5).rlp(5000)</pre></section><section><h3 id="doc-206">roomsize</h3><p>Synonyms: <code>rsize, sz, size</code></p><p><p>Sets the room size of the reverb, see <code>room</code>.
When this property is changed, the reverb will be recaculated, so only change this sparsely..</p></p><ul><li>size : number | Pattern  - between 0 and 10</li></ul><pre>s("bd sd [~ bd] sd").room(.8).rsize(1)</pre><pre>s("bd sd [~ bd] sd").room(.8).rsize(4)</pre></section><section><h3 id="doc-207">rootNotes</h3><p><p>Maps the chords of the incoming pattern to root notes in the given octave.</p></p><ul><li>octave : octave  - octave to use</li></ul><pre>"&lt;C^7 A7 Dm7 G7&gt;".rootNotes(2).note()</pre></section><section><h3 id="doc-208">round</h3><p><p>Assumes a numerical pattern. Returns a new pattern with all values rounded
to the nearest integer.</p></p><ul></ul><pre>n("0.5 1.5 2.5".round()).scale("C:major")</pre></section><section><h3 id="doc-209">run</h3><p><p>A discrete pattern of numbers from 0 to n-1</p></p><ul></ul><pre>n(run(4)).scale("C4:pentatonic")
// n("0 1 2 3").scale("C4:pentatonic")</pre></section><section><h3 id="doc-210">s</h3><p>Synonyms: <code>sound</code></p><p><p>Select a sound / sample by name. When using mininotation, you can also optionally supply 'n' and 'gain' parameters
separated by ':'.</p></p><ul><li>sound : string | Pattern  - The sound / pattern of sounds to pick</li></ul><pre>s("bd hh")</pre><pre>s("bd:0 bd:1 bd:0:0.3 bd:1:1.4")</pre></section><section><h3 id="doc-211">samples</h3><p><p>Loads a collection of samples to use with <code>s</code></p></p><ul></ul><pre>samples('github:tidalcycles/dirt-samples');
s("[bd ~]*2, [~ hh]*2, ~ sd")</pre><pre>samples({
 bd: '808bd/BD0000.WAV',
 sd: '808sd/SD0010.WAV'
 }, 'https://raw.githubusercontent.com/tidalcycles/Dirt-Samples/master/');
s("[bd ~]*2, [~ hh]*2, ~ sd")</pre><pre>samples('shabda:noise,chimp:2')
s("noise &lt;chimp:0*2 chimp:1&gt;")</pre><pre>samples('shabda/speech/fr-FR/f:chocolat')
s("chocolat*4")</pre></section><section><h3 id="doc-212">saw</h3><p><p>A sawtooth signal between 0 and 1.</p></p><ul></ul><pre>note("&lt;c3 [eb3,g3] g2 [g3,bb3]&gt;*8")
.clip(saw.slow(2))</pre><pre>n(saw.range(0,8).segment(8))
.scale('C major')</pre></section><section><h3 id="doc-213">scale</h3><p><p>Turns
 numbers into notes in the scale (zero indexed). Also sets scale for 
other scale operations, like {@link Pattern#scaleTranspose}.</p>
<p>A scale consists of a root note (e.g. <code>c4</code>, <code>c</code>, <code>f#</code>, <code>bb4</code>) followed by semicolon (':') and then a <a href="https://github.com/tonaljs/tonal/blob/main/packages/scale-type/data.ts">scale type</a>.</p>
<p>The root note defaults to octave 3, if no octave number is given.</p></p><ul><li>scale : string  - Name of scale</li></ul><pre>n("0 2 4 6 4 2").scale("C:major")</pre><pre>n("[0,7] 4 [2,7] 4")
.scale("C:&lt;major minor&gt;/2")
.s("piano")</pre><pre>n(rand.range(0,12).segment(8))
.scale("C:ritusen")
.s("piano")</pre></section><section><h3 id="doc-214">scaleTranspose</h3><p><p>Transposes notes inside the scale by the number of steps.
Expected to be called on a Pattern which already has a {@link Pattern#scale}</p></p><ul><li>offset : offset  - number of steps inside the scale</li></ul><pre>"-8 [2,4,6]"
.scale('C4 bebop major')
.scaleTranspose("&lt;0 -1 -2 -3 -4 -5 -6 -4&gt;")
.note()</pre></section><section><h3 id="doc-215">scope</h3><p>Synonyms: <code>tscope</code></p><p><p>Renders an oscilloscope for the time domain of the audio signal.</p></p><ul><li>config : object  - optional config with options:</li><li>align : boolean  - if 1, the scope will be aligned to the first zero crossing. defaults to 1</li><li>color : string  - line color as hex or color name. defaults to white.</li><li>thickness : number  - line thickness. defaults to 3</li><li>scale : number  - scales the y-axis. Defaults to 0.25</li><li>pos : number  - y-position relative to screen height. 0 = top, 1 = bottom of screen</li><li>trigger : number  - amplitude value that is used to align the scope. defaults to 0.</li></ul><pre>s("sawtooth").scope()</pre></section><section><h3 id="doc-216">segment</h3><p><p>Samples the pattern at a rate of n events per cycle. Useful for turning a continuous pattern into a discrete one.</p></p><ul><li>segments : number  - number of segments per cycle</li></ul><pre>note(saw.range(40,52).segment(24))</pre></section><section><h3 id="doc-217">seq</h3><p>Synonyms: <code>sequence, fastcat</code></p><p><p>Appends the given pattern(s) to the current pattern.</p></p><ul></ul><pre>s("hh*4").seq(
  note("c4(5,8)")
)</pre></section><section><h3 id="doc-218">seq</h3><p>Synonyms: <code>fastcat, sequence</code></p><p><p>Like <strong>cat</strong>, but the items are crammed into one cycle.</p></p><ul></ul><pre>seq("e5", "b4", ["d5", "c5"]).note()
// "e5 b4 [d5 c5]".note()</pre></section><section><h3 id="doc-219">sequence</h3><p><p>See <code>fastcat</code></p></p><ul></ul></section><section><h3 id="doc-220">setContext</h3><p><p>Returns a new pattern with the context field set to every hap set to the given value.</p></p><ul><li>context : * </li></ul></section><section><h3 id="doc-221">shape</h3><p><p>(Deprecated) Wave shaping distortion. WARNING: can suddenly get unpredictably loud.
Please use distort instead, which has a more predictable response curve
second option in optional array syntax (ex: ".9:.5") applies a postgain to the output</p></p><ul><li>distortion : number | Pattern  - between 0 and 1</li></ul><pre>s("bd sd [~ bd] sd,hh*8").shape("&lt;0 .2 .4 .6 .8&gt;")</pre></section><section><h3 id="doc-222">showFirstCycle</h3><p><p>More human-readable version of the <code>firstCycleValues</code> accessor.</p></p><ul></ul></section><section><h3 id="doc-223">silence</h3><p><p>Does absolutely nothing..</p></p><ul></ul><pre>silence // "~"</pre></section><section><h3 id="doc-224">sine</h3><p><p>A sine signal between 0 and 1.</p></p><ul></ul><pre>n(sine.segment(16).range(0,15))
.scale("C:minor")</pre></section><section><h3 id="doc-225">slice</h3><p><p>Chops samples into the given number of slices, triggering those slices with a given pattern of slice numbers.
Instead of a number, it also accepts a list of numbers from 0 to 1 to slice at specific points.</p></p><ul></ul><pre>samples('github:tidalcycles/dirt-samples')
s("breaks165").slice(8, "0 1 &lt;2 2*2&gt; 3 [4 0] 5 6 7".every(3, rev)).slow(0.75)</pre><pre>samples('github:tidalcycles/dirt-samples')
s("breaks125").fit().slice([0,.25,.5,.75], "0 1 1 &lt;2 3&gt;")</pre></section><section><h3 id="doc-226">slider</h3><p><p>Displays a slider widget to allow the user manipulate a value</p></p><ul><li>value : number  - Initial value</li><li>min : number  - Minimum value - optional, defaults to 0</li><li>max : number  - Maximum value - optional, defaults to 1</li><li>step : number  - Step size - optional</li></ul></section><section><h3 id="doc-227">slow</h3><p>Synonyms: <code>sparsity</code></p><p><p>Slow down a pattern over the given number of cycles. Like the "/" operator in mini notation.</p></p><ul><li>factor : number | Pattern  - slow down factor</li></ul><pre>s("bd hh sd hh").slow(2) // s("[bd hh sd hh]/2")</pre></section><section><h3 id="doc-228">slowcat</h3><p><p>Concatenation: combines a list of patterns, switching between them successively, one per cycle:</p>
<p>synonyms: <code>cat</code></p></p><ul></ul><pre>slowcat("e5", "b4", ["d5", "c5"])</pre></section><section><h3 id="doc-229">slowcatPrime</h3><p><p>Concatenation:
 combines a list of patterns, switching between them successively, one 
per cycle. Unlike slowcat, this version will skip cycles.</p></p><ul><li>items : any  - The items to concatenate</li></ul></section><section><h3 id="doc-230">someCycles</h3><p><p>Shorthand for <code>.someCyclesBy(0.5, fn)</code></p></p><ul></ul><pre>s("bd,hh*8").someCycles(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-231">someCyclesBy</h3><p><p>Randomly applies the given function by the given probability on a cycle by cycle basis.
Similar to <code>sometimesBy</code></p></p><ul><li>probability : number | Pattern  - a number between 0 and 1</li><li>function : function  - the transformation to apply</li></ul><pre>s("bd,hh*8").someCyclesBy(.3, x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-232">sometimes</h3><p><p>Applies the given function with a 50% chance</p></p><ul><li>function : function  - the transformation to apply</li></ul><pre>s("hh*8").sometimes(x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-233">sometimesBy</h3><p><p>Randomly applies the given function by the given probability.
Similar to <code>someCyclesBy</code></p></p><ul><li>probability : number | Pattern  - a number between 0 and 1</li><li>function : function  - the transformation to apply</li></ul><pre>s("hh*8").sometimesBy(.4, x=&gt;x.speed("0.5"))</pre></section><section><h3 id="doc-234">sortHapsByPart</h3><p><p>Returns a new pattern, which returns haps sorted in temporal order. Mainly
of use when comparing two patterns for equality, in tests.</p></p><ul></ul></section><section><h3 id="doc-235">source</h3><p>Synonyms: <code>src</code></p><p><p>Define a custom webaudio node to use as a sound source.</p></p><ul><li>getSource : function </li></ul></section><section><h3 id="doc-236">speed</h3><p><p>Changes the speed of sample playback, i.e. a cheap way of changing pitch.</p></p><ul><li>speed : number | Pattern  - inf to inf, negative numbers play the sample backwards.</li></ul><pre>s("bd*6").speed("1 2 4 1 -2 -4")</pre><pre>speed("1 1.5*2 [2 1.1]").s("piano").clip(1)</pre></section><section><h3 id="doc-237">splice</h3><p><p>Works the same as slice, but changes the playback speed of each slice to match the duration of its step.</p></p><ul></ul><pre>samples('github:tidalcycles/dirt-samples')
s("breaks165")
.splice(8,  "0 1 [2 3 0]@2 3 0@2 7")</pre></section><section><h3 id="doc-238">splitQueries</h3><p><p>Returns a new pattern, with queries split at cycle boundaries. This makes
some calculations easier to express, as all haps are then constrained to
happen within a cycle.</p></p><ul></ul></section><section><h3 id="doc-239">square</h3><p><p>A square signal between 0 and 1.</p></p><ul></ul><pre>n(square.segment(4).range(0,7)).scale("C:minor")</pre></section><section><h3 id="doc-240">squeeze</h3><p><p>Pick from the list of values (or patterns of values) via the index using the given
pattern of integers. The selected pattern will be compressed to fit the duration of the selecting event</p></p><ul><li>pat : Pattern </li><li>xs : * </li></ul><pre>note(squeeze("&lt;0@2 [1!2] 2&gt;", ["g a", "f g f g" , "g a c d"]))</pre></section><section><h3 id="doc-241">squiz</h3><p><p>Made
 by Calum Gunn. Reminiscent of some weird mixture of filter, 
ring-modulator and pitch-shifter. The SuperCollider manual defines Squiz
 as:</p>
<p>"A simplistic pitch-raising algorithm. It's not meant to sound 
natural; its sound is reminiscent of some weird mixture of filter, 
ring-modulator and pitch-shifter, depending on the input. The algorithm 
works by cutting the signal into fragments (delimited by upwards-going 
zero-crossings) and squeezing those fragments in the time domain (i.e. 
simply playing them back faster than they came in), leaving silences 
inbetween. All the parameters apart from memlen can be modulated."</p></p><ul><li>squiz : number | Pattern  - Try passing multiples of 2 to it - 2, 4, 8 etc.</li></ul><pre>squiz("2 4/2 6 [8 16]").s("bd").osc()</pre></section><section><h3 id="doc-242">stack</h3><p><p>Stacks the given pattern(s) to the current pattern.</p></p><ul></ul><pre>s("hh*4").stack(
  note("c4(5,8)")
)</pre></section><section><h3 id="doc-243">stack</h3><p>Synonyms: <code>polyrhythm, pr</code></p><p><p>The given items are played at the same time at the same length.</p></p><ul></ul><pre>stack("g3", "b3", ["e4", "d4"]).note()
// "g3,b3,[e4,d4]".note()</pre></section><section><h3 id="doc-244">striate</h3><p><p>Cuts each sample into the given number of parts, triggering progressive portions of each sample at each loop.</p></p><ul></ul><pre>s("numbers:0 numbers:1 numbers:2").striate(6).slow(3)</pre></section><section><h3 id="doc-245">stripContext</h3><p><p>Returns a new pattern with the context field of every hap set to an empty object.</p></p><ul></ul></section><section><h3 id="doc-246">struct</h3><p><p>Applies the given structure to the pattern:</p></p><ul></ul><pre>note("c,eb,g")
  .struct("x ~ x ~ ~ x ~ x ~ ~ ~ x ~ x ~ ~")
  .slow(2)</pre></section><section><h3 id="doc-247">stut</h3><p><p>Deprecated. Like echo, but the last 2 parameters are flipped.</p></p><ul><li>times : number  - how many times to repeat</li><li>feedback : number  - velocity multiplicator for each iteration</li><li>time : number  - cycle offset between iterations</li></ul><pre>s("bd sd").stut(3, .8, 1/6)</pre></section><section><h3 id="doc-248">sub</h3><p><p>Like add, but the given numbers are subtracted.</p></p><ul></ul><pre>n("0 2 4".sub("&lt;0 1 2 3&gt;")).scale("C4:minor")
// See add for more information.</pre></section><section><h3 id="doc-249">superimpose</h3><p><p>Superimposes the result of the given function(s) on top of the original pattern:</p></p><ul></ul><pre>"&lt;0 2 4 6 ~ 4 ~ 2 0!3 ~!5&gt;*8"
  .superimpose(x=&gt;x.add(2))
  .scale('C minor').note()</pre></section><section><h3 id="doc-250">sustain</h3><p>Synonyms: <code>sus</code></p><p><p>Amplitude envelope sustain level: The level which is reached after attack / decay, being sustained until the offset.</p></p><ul><li>gain : number | Pattern  - sustain level between 0 and 1</li></ul><pre>note("c3 e3 f3 g3").decay(.2).sustain("&lt;0 .1 .4 .6 1&gt;")</pre></section><section><h3 id="doc-251">timeCat</h3><p><p>Like <code>seq</code>, but each step has a length, relative to the whole.</p></p><ul></ul><pre>timeCat([3,"e3"],[1, "g3"]).note()
// "e3@3 g3".note()</pre></section><section><h3 id="doc-252">toBipolar</h3><p><p>Assumes a numerical pattern, containing unipolar values in the range 0 ..</p>
<ol>
<li>Returns a new pattern with values scaled to the bipolar range -1 .. 1</li>
</ol></p><ul></ul></section><section><h3 id="doc-253">transpose</h3><p><p>Change the pitch of each value by the given amount. Expects numbers or note strings as values.
The amount can be given as a number of semitones or as a string in interval short notation.
If you don't care about enharmonic correctness, just use numbers. Otherwise, pass the interval of
the form: ST where S is the degree number and T the type of interval with</p>
<ul>
<li>M = major</li>
<li>m = minor</li>
<li>P = perfect</li>
<li>A = augmented</li>
<li>d = diminished</li>
</ul>
<p>Examples intervals:</p>
<ul>
<li>1P = unison</li>
<li>3M = major third</li>
<li>3m = minor third</li>
<li>4P = perfect fourth</li>
<li>4A = augmented fourth</li>
<li>5P = perfect fifth</li>
<li>5d = diminished fifth</li>
</ul></p><ul><li>amount : string | number  - Either number of semitones or interval string.</li></ul><pre>"c2 c3".fast(2).transpose("&lt;0 -2 5 3&gt;".slow(2)).note()</pre><pre>"c2 c3".fast(2).transpose("&lt;1P -2M 4P 3m&gt;".slow(2)).note()</pre></section><section><h3 id="doc-254">tri</h3><p><p>A triangle signal between 0 and 1.</p></p><ul></ul><pre>n(tri.segment(8).range(0,7)).scale("C:minor")</pre></section><section><h3 id="doc-255">undegradeBy</h3><p><p>Inverse of <code>degradeBy</code>: Randomly removes events from the pattern by a given amount.
0 = 100% chance of removal
1 = 0% chance of removal
Events that would be removed by degradeBy are let through by undegradeBy and vice versa (see second example).</p></p><ul><li>amount : number  - a number between 0 and 1</li></ul><pre>s("hh*8").undegradeBy(0.2)</pre></section><section><h3 id="doc-256">unit</h3><p><p>Used in conjunction with <code>speed</code>, accepts values of "r" (rate, default behavior), "c" (cycles), or "s" (seconds). Using <code>unit "c"</code> means <code>speed</code> will be interpreted in units of cycles, e.g. <code>speed "1"</code> means samples will be stretched to fill a cycle. Using <code>unit "s"</code> means the playback speed will be adjusted so that the duration is the number of seconds specified by <code>speed</code>.</p></p><ul><li>unit : number | string | Pattern  - see description above</li></ul><pre>speed("1 2 .5 3").s("bd").unit("c").osc()</pre></section><section><h3 id="doc-257">velocity</h3><p><p>Sets the velocity from 0 to 1. Is multiplied together with gain.</p></p><ul></ul><pre>s("hh*8")
.gain(".4!2 1 .4!2 1 .4 1")
.velocity(".4 1")</pre></section><section><h3 id="doc-258">vib</h3><p>Synonyms: <code>vibrato, v</code></p><p><p>Applies a vibrato to the frequency of the oscillator.</p></p><ul><li>frequency : number | Pattern  - of the vibrato in hertz</li></ul><pre>note("a e")
.vib("&lt;.5 1 2 4 8 16&gt;")</pre><pre>// change the modulation depth with ":"
note("a e")
.vib("&lt;.5 1 2 4 8 16&gt;:12")</pre></section><section><h3 id="doc-259">vibmod</h3><p>Synonyms: <code>vmod</code></p><p><p>Sets the vibrato depth in semitones. Only has an effect if <code>vibrato</code> | <code>vib</code> | <code>v</code> is is also set</p></p><ul><li>depth : number | Pattern  - of vibrato (in semitones)</li></ul><pre>note("a e").vib(4)
.vibmod("&lt;.25 .5 1 2 12&gt;")</pre><pre>// change the vibrato frequency with ":"
note("a e")
.vibmod("&lt;.25 .5 1 2 12&gt;:8")</pre></section><section><h3 id="doc-260">voicing</h3><p><p>Turns chord symbols into voicings. You can use the following control params:</p>
<ul>
<li><code>chord</code>: Note, followed by chord symbol, e.g. C Am G7 Bb^7</li>
<li><code>dict</code>: voicing dictionary to use, falls back to default dictionary</li>
<li><code>anchor</code>: the note that is used to align the chord</li>
<li><code>mode</code>: how the voicing is aligned to the anchor
<ul>
<li><code>below</code>: top note &lt;= anchor</li>
<li><code>duck</code>: top note &lt;= anchor, anchor excluded</li>
<li><code>above</code>: bottom note &gt;= anchor</li>
</ul>
</li>
<li><code>offset</code>: whole number that shifts the voicing up or down to the next voicing</li>
<li><code>n</code>: if set, the voicing is played like a scale. Overshooting numbers will be octaved</li>
</ul>
<p>All of the above controls are optional, except <code>chord</code>.
If you pass a pattern of strings to voicing, they will be interpreted as chords.</p></p><ul></ul><pre>n("0 1 2 3").chord("&lt;C Am F G&gt;").voicing()</pre></section><section><h3 id="doc-261">voicings</h3><p><p>DEPRECATED: still works, but it is recommended you use .voicing instead (without s).
Turns chord symbols into voicings, using the smoothest voice leading possible.
Uses <a href="https://github.com/felixroos/chord-voicings#chord-voicings">chord-voicings package</a>.</p></p><ul><li>dictionary : string  - which voicing dictionary to use.</li></ul><pre>stack("&lt;C^7 A7 Dm7 G7&gt;".voicings('lefthand'), "&lt;C3 A2 D3 G2&gt;").note()</pre></section><section><h3 id="doc-262">vowel</h3><p><p>Formant filter to make things sound like vowels.</p></p><ul><li>vowel : string | Pattern  - 
You can use a e i o u ae aa oe ue y uh un en an on, corresponding to [a]
 [e] [i] [o] [u] [æ] [ɑ] [ø] [y] [ɯ] [ʌ] [œ̃] [ɛ̃] [ɑ̃] [ɔ̃]. Aliases: 
aa = å = ɑ, oe = ø = ö, y = ı, ae = æ.</li></ul><pre>note("[c2 &lt;eb2 &lt;g2 g1&gt;&gt;]*2").s('sawtooth')
.vowel("&lt;a e i &lt;o u&gt;&gt;")</pre><pre>s("bd sd mt ht bd [~ cp] ht lt").vowel("[a|e|i|o|u]")</pre></section><section><h3 id="doc-263">when</h3><p><p>Applies the given function whenever the given pattern is in a true state.</p></p><ul><li>binary_pat : Pattern </li><li>func : function </li></ul><pre>"c3 eb3 g3".when("&lt;0 1&gt;/2", x=&gt;x.sub("5")).note()</pre></section><section><h3 id="doc-264">withContext</h3><p><p>Returns a new pattern with the given function applied to the context field of every hap.</p></p><ul><li>func : function </li></ul></section><section><h3 id="doc-265">withHap</h3><p><p>As with <code>withHaps</code>, but applies the function to every hap, rather than every list of haps.</p></p><ul><li>func : function </li></ul></section><section><h3 id="doc-266">withHaps</h3><p><p>Returns a new pattern with the given function applied to the list of haps returned by every query.</p></p><ul><li>func : function </li></ul></section><section><h3 id="doc-267">withHapSpan</h3><p><p>Similar to <code>withQuerySpan</code>, but the function is applied to the timespans
of all haps returned by pattern queries (both <code>part</code> timespans, and where
present, <code>whole</code> timespans).</p></p><ul><li>func : function </li></ul></section><section><h3 id="doc-268">withHapTime</h3><p><p>As with <code>withHapSpan</code>, but the function is applied to both the
begin and end time of the hap timespans.</p></p><ul><li>func : function  - the function to apply</li></ul></section><section><h3 id="doc-269">withLoc</h3><p><p>Returns a new pattern with the given location information added to the
context of every hap.</p></p><ul><li>start : Number  - start offset</li><li>end : Number  - end offset</li></ul></section><section><h3 id="doc-270">withQuerySpan</h3><p><p>Returns a new pattern, where the given function is applied to the query
timespan before passing it to the original pattern.</p></p><ul><li>func : function  - the function to apply</li></ul></section><section><h3 id="doc-271">withQueryTime</h3><p><p>As with <code>withQuerySpan</code>, but the function is applied to both the
begin and end time of the query timespan.</p></p><ul><li>func : function  - the function to apply</li></ul></section><section><h3 id="doc-272">withValue</h3><p>Synonyms: <code>fmap</code></p><p><p>Returns a new pattern, with the function applied to the value of
each hap. It has the alias <code>fmap</code>.</p></p><ul><li>func : function  - to to apply to the value</li></ul><pre>"0 1 2".withValue(v =&gt; v + 10).log()</pre></section><section><h3 id="doc-273">wordfall</h3><p><p>Displays a vertical pianoroll with event labels.
Supports all the same options as pianoroll.</p></p><ul></ul></section><section><h3 id="doc-274">xfade</h3><p><p>Cross-fades between left and right from 0 to 1:</p>
<ul>
<li>0 = (full left, no right)</li>
<li>.5 = (both equal)</li>
<li>1 = (no left, full right)</li>
</ul></p><ul></ul><pre>xfade(s("bd*2"), "&lt;0 .25 .5 .75 1&gt;", s("hh*8"))</pre></section><section><h3 id="doc-275">zoom</h3><p><p>Plays
 a portion of a pattern, specified by the beginning and end of a time 
span. The new resulting pattern is played over the time period of the 
original pattern:</p></p><ul></ul><pre>s("bd*2 hh*3 [sd bd]*2 perc").zoom(0.25, 0.75)
// s("hh*3 [sd bd]*2") // equivalent</pre></section></div></div></div></div></div></nav></div></div></astro-island> <a rel="me" href="https://social.toplap.org/@strudel" target="_blank" class="hidden">mastodon</a> </body></html>